{"title":"JS闭包和作用域","date":"2019-08-24T11:27:49.000Z","excerpt":"","slug":"closure","comments":true,"dropcap":true,"tags":["javaScript"],"categories":["javaScript"],"updated":"2019-12-01T13:34:23.000Z","content":"<p>今天来啃闭包和作用域这块难啃的骨头。</p>\n<h1 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a><strong>什么是闭包</strong></h1><blockquote>\n<p>闭包是函数和声明该函数的词法环境的组合。 —-MDN</p>\n</blockquote>\n<blockquote>\n<p>闭包就是指有权访问另一个函数作用域中的变量的函数。 —-红宝书</p>\n</blockquote>\n<h1 id=\"什么是作用域\"><a href=\"#什么是作用域\" class=\"headerlink\" title=\"什么是作用域\"></a><strong>什么是作用域</strong></h1><p>作用域是一个变量和函数的作用范围，JS中函数内声明的所有变量在函数体内始终是可见的，在ES6前有全局作用域和局部作用域，但是没有块级作用域（catch只在其内部生效），局部变量的优先级高于全局变量。</p>\n<h1 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a><strong>作用域链</strong></h1><p>Javascript中有一个执行上下文(execution context)的概念，它定义了变量或函数有权访问的其它数据，决定了他们各自的行为。每个执行环境都有一个与之关联的变量对象，环境中定义的所有变量和函数都保存在这个对象中。</p>\n<p>当访问一个变量时，解释器会首先在当前作用域查找标示符，如果没有找到，就去父作用域找，直到找到该变量的标示符或者不在父作用域中，这就是作用域链。</p>\n<p>作用域链和原型继承查找时的区别：如果去查找一个普通对象的属性，但是在当前对象和其原型中都找不到时，会返回undefined；但查找的属性在作用域链中不存在的话就会抛出ReferenceError。</p>\n<p>作用域链的顶端是全局对象，在全局环境中定义的变量就会绑定到全局对象中。</p>\n<p>闭包的作用域链包含着它自己的作用域，以及包含它的函数的作用域和全局作用域。</p>\n<h1 id=\"闭包的特性\"><a href=\"#闭包的特性\" class=\"headerlink\" title=\"闭包的特性\"></a><strong>闭包的特性</strong></h1><ol>\n<li>函数嵌套函数</li>\n<li>内部函数可以访问外部作用域(或外部函数)的变量和参数</li>\n<li>参数和变量不会被回收机制回收，一直存在于内存中，除非手动清除<h1 id=\"为什么要用闭包\"><a href=\"#为什么要用闭包\" class=\"headerlink\" title=\"为什么要用闭包\"></a><strong>为什么要用闭包</strong></h1></li>\n<li>希望变量长期存在内存中</li>\n<li>避免全局变量污染<h1 id=\"闭包举例及应用\"><a href=\"#闭包举例及应用\" class=\"headerlink\" title=\"闭包举例及应用\"></a><strong>闭包举例及应用</strong></h1><h2 id=\"最简单的闭包\"><a href=\"#最简单的闭包\" class=\"headerlink\" title=\"最简单的闭包\"></a>最简单的闭包</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a; <span class=\"comment\">// 内部函数访问外部作用域的变量a</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = outer(); <span class=\"comment\">// 这一句执行完，变量a并没有被回收，因为要内部函数还需要引用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b()); <span class=\"comment\">// 1 执行内部函数，引用外部变量a</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这是最简单的一种闭包，已经包含了闭包的三个特性。</p>\n<h2 id=\"释放对闭包的引用\"><a href=\"#释放对闭包的引用\" class=\"headerlink\" title=\"释放对闭包的引用\"></a>释放对闭包的引用</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeAdder</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> add5 = makeAdder(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> add10 = makeAdder(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add5(<span class=\"number\">2</span>)); <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add10(<span class=\"number\">2</span>)); <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"comment\">// 释放对闭包的引用</span></span><br><span class=\"line\">add5 = <span class=\"literal\">null</span>;</span><br><span class=\"line\">add10 = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>上面的代码中，add5和add10都是闭包，它们共享相同的函数定义，但是保存了不同的环境，add5的环境中x是5，add10的环境中x是10。最后都通过null释放了对内部函数（闭包）的引用。</p>\n<p>在javascript中，如果一个对象不再被引用，那么这个对象就会被垃圾回收机制回收；如果两个对象互相引用，而不再被第3者所引用，那么这两个互相引用的对象也会被回收。</p>\n<h2 id=\"“JavaScript中的函数运行在它们被定义的作用域里，而不是它们被执行的作用域里。”-——《JavaScript权威指南》\"><a href=\"#“JavaScript中的函数运行在它们被定义的作用域里，而不是它们被执行的作用域里。”-——《JavaScript权威指南》\" class=\"headerlink\" title=\"“JavaScript中的函数运行在它们被定义的作用域里，而不是它们被执行的作用域里。” ——《JavaScript权威指南》\"></a>“JavaScript中的函数运行在它们被定义的作用域里，而不是它们被执行的作用域里。” ——《JavaScript权威指南》</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Jane'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myName</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'hahaha'</span>;</span><br><span class=\"line\">  getName();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myName(); <span class=\"comment\">// Jane</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"闭包与for循环\"><a href=\"#闭包与for循环\" class=\"headerlink\" title=\"闭包与for循环\"></a>闭包与for循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrFunc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        arr[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr; <span class=\"comment\">// 函数声明的时候会把for循环执行一遍，最终i的值时10，后续函数被调用的时候传入的i都是10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrFunc()[<span class=\"number\">2</span>]()); <span class=\"comment\">// 10，arrFunc()执行的结果是arr中有10个匿名函数，每个匿名函数执行的结果都是10</span></span><br></pre></td></tr></table></figure>\n<p>解决办法：</p>\n<ol>\n<li>用闭包<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrFunc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        arr[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrFunc()[<span class=\"number\">2</span>]()); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrFunc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">            arr[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrFunc()[<span class=\"number\">2</span>]()); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>因为用了闭包，因此每一次循环都是独立的一个环境，对应不同的i的值，因此才能实现arr数组中是10个返回不同值的匿名函数。</p>\n<p>这种闭包可以用于循环添加DOM事件。</p>\n<ol start=\"2\">\n<li>用ES6的let<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrFunc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        arr[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrFunc()[<span class=\"number\">2</span>]()); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"闭包中的this\"><a href=\"#闭包中的this\" class=\"headerlink\" title=\"闭包中的this\"></a><strong>闭包中的this</strong></h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'object'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.getName()()); <span class=\"comment\">// ''</span></span><br></pre></td></tr></table></figure>\n<p><code>obj.getName()()</code>分成两步来看，第一步执行<code>obj.getName()</code>得到匿名函数<code>function(){return this.name}</code>，第二步在全局作用域中执行<code>function(){return this.name}()</code>，<code>this</code>指向<code>window</code>对象，它的<code>name</code>属性的值默认是为空的，因此打印空字符串。</p>\n<p>想让<code>this</code>指向<code>obj</code>,可以用一下方法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'object'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>; <span class=\"comment\">// 把this保存起来</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> that.name; <span class=\"comment\">// 返回that.name</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.getName()()); <span class=\"comment\">// object</span></span><br></pre></td></tr></table></figure></p>\n<p>下面这种情况也要注意：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'window'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'object'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.getName()); <span class=\"comment\">// object</span></span><br><span class=\"line\">(obj.name = obj.name)(); <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure></p>\n<p><code>(obj.getName = obj.getName)</code>赋值语句返回的是等号右边的值，在全局作用域中返回，所以<code>(obj.getName = obj.getName)();</code>的<code>this</code></p>\n<h2 id=\"设计私有的方法和变量\"><a href=\"#设计私有的方法和变量\" class=\"headerlink\" title=\"设计私有的方法和变量\"></a>设计私有的方法和变量</h2><p>任何在函数中定义的变量，都可以认为是私有变量，因为不能在函数外部访问这些变量。私有变量包括函数的参数、局部变量和函数内定义的其他函数。</p>\n<p>把有权访问私有变量的公有方法称为特权方法（privileged method）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义私有变量series和run</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> series = <span class=\"string\">'哺乳动物'</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'I can run!'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 特权方法，可以访问私有变量series</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getSeries = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> series;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dog.getSeries()); <span class=\"comment\">// 哺乳动物</span></span><br></pre></td></tr></table></figure></p>\n<p>了解两个概念：</p>\n<ol>\n<li>单例：只有一个实例的对象。JS中通常用字面量来创建单例</li>\n<li>模块模式：我的理解就是用闭包的方式为单例创建私有方法和私有属性的模式</li>\n</ol>\n<p>用普通模式创建单例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objA = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Jane'</span>,</span><br><span class=\"line\">    speak: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'I can speak!'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>用模块模式创建单例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> listObj = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义私有变量</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> list = [];</span><br><span class=\"line\">    <span class=\"comment\">// 定义特权方法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">        list.push(item);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> getAll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> getLength = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.length;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        add: add,</span><br><span class=\"line\">        getAll: getAll,</span><br><span class=\"line\">        getLength: getLength</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\">listObj.add(&#123;</span><br><span class=\"line\">    id: <span class=\"number\">0</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'hahaha'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(listObj.getAll()); <span class=\"comment\">// [&#123; id: 0, name: 'hahaha' &#125;]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(listObj.getLength()); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"闭包的缺陷\"><a href=\"#闭包的缺陷\" class=\"headerlink\" title=\"闭包的缺陷\"></a><strong>闭包的缺陷</strong></h1><p>闭包的缺点就是常驻内存会增大内存使用量，并且使用不当很容易造成内存泄露。</p>\n<p>如果不是因为某些特殊任务而需要闭包，在没有必要的情况下，在其它函数中创建函数是不明智的，因为闭包对脚本性能具有负面影响，包括处理速度和内存消耗。</p>\n<h1 id=\"一道面试题\"><a href=\"#一道面试题\" class=\"headerlink\" title=\"一道面试题\"></a><strong>一道面试题</strong></h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">n, o</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        fun: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fun(m, n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = fun(<span class=\"number\">0</span>); <span class=\"comment\">// undefined，同时a=&#123;fun:funtion(m)&#123;return fun(m, 0)&#125;&#125;</span></span><br><span class=\"line\">a.fun(<span class=\"number\">1</span>); <span class=\"comment\">// 0，同时得到&#123;fun:funtion(1)&#123;return fun(1, 1)&#125;&#125; 外层函数传入n=1,内层函数的n也被置为1</span></span><br><span class=\"line\">a.fun(<span class=\"number\">2</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\">a.fun(<span class=\"number\">3</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = fun(<span class=\"number\">0</span>).fun(<span class=\"number\">1</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\">b.fun(<span class=\"number\">2</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\">b.fun(<span class=\"number\">3</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = fun(<span class=\"number\">0</span>).fun(<span class=\"number\">1</span>).fun(<span class=\"number\">2</span>).fun(<span class=\"number\">3</span>); <span class=\"comment\">// undefined 0 1 2</span></span><br></pre></td></tr></table></figure>","prev":{"title":"模拟实现call()、apply()","slug":"writeallapply"},"next":{"title":"Object.create()、new Object()和{}的区别","slug":"createNew"},"link":"/closure","toc":[{"title":"<strong>什么是闭包</strong>","id":"什么是闭包","index":"1"},{"title":"<strong>什么是作用域</strong>","id":"什么是作用域","index":"2"},{"title":"<strong>作用域链</strong>","id":"作用域链","index":"3"},{"title":"<strong>闭包的特性</strong>","id":"闭包的特性","index":"4"},{"title":"<strong>为什么要用闭包</strong>","id":"为什么要用闭包","index":"5"},{"title":"<strong>闭包举例及应用</strong>","id":"闭包举例及应用","index":"6","children":[{"title":"最简单的闭包","id":"最简单的闭包","index":"6.1"},{"title":"释放对闭包的引用","id":"释放对闭包的引用","index":"6.2"},{"title":"“JavaScript中的函数运行在它们被定义的作用域里，而不是它们被执行的作用域里。” ——《JavaScript权威指南》","id":"“JavaScript中的函数运行在它们被定义的作用域里，而不是它们被执行的作用域里。”-——《JavaScript权威指南》","index":"6.3"},{"title":"闭包与for循环","id":"闭包与for循环","index":"6.4"}]},{"title":"<strong>闭包中的this</strong>","id":"闭包中的this","index":"7","children":[{"title":"设计私有的方法和变量","id":"设计私有的方法和变量","index":"7.1"}]},{"title":"<strong>闭包的缺陷</strong>","id":"闭包的缺陷","index":"8"},{"title":"<strong>一道面试题</strong>","id":"一道面试题","index":"9"}]}