{"title":"模拟实现call()、apply()","date":"2019-09-01T09:39:13.000Z","excerpt":"","slug":"writeallapply","comments":true,"dropcap":true,"tags":["javaScript"],"categories":["javaScript"],"updated":"2019-12-01T13:34:23.000Z","content":"<p>之前总结过<code>call()、apply()</code>的区别和应用场景，这次想总结如何模拟实现这两者，其实就是搞懂它们的原理。</p>\n<h1 id=\"模拟实现call\"><a href=\"#模拟实现call\" class=\"headerlink\" title=\"模拟实现call()\"></a><strong>模拟实现call()</strong></h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo =&#123;</span><br><span class=\"line\">  value:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar.call(foo); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"call-的两个特点\"><a href=\"#call-的两个特点\" class=\"headerlink\" title=\"call()的两个特点\"></a>call()的两个特点</h2><ol>\n<li>改变<code>this</code>的指向</li>\n<li>调用了<code>bar</code>函数</li>\n</ol>\n<h2 id=\"模拟实现第一步\"><a href=\"#模拟实现第一步\" class=\"headerlink\" title=\"模拟实现第一步\"></a>模拟实现第一步</h2><p>在调用<code>call</code>时，我们希望<code>bar</code>里的<code>this</code>指向<code>foo</code>，我们可以把<code>bar</code>写进<code>foo</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span>,</span><br><span class=\"line\">    bar: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.bar();</span><br></pre></td></tr></table></figure></p>\n<p>这样就改变了<code>this</code>指向，但<code>foo</code>却被添加了一个额外的属性，应该删除这个属性，大概思路：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.fn = bar;</span><br><span class=\"line\">foo.fn();</span><br><span class=\"line\"><span class=\"keyword\">delete</span> foo.fn;</span><br></pre></td></tr></table></figure></p>\n<p>因此改进一下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.Prototype.call2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 首先要获取调用call的函数，用this可以获取</span></span><br><span class=\"line\">    context.fn = <span class=\"keyword\">this</span>; <span class=\"comment\">// foo.fn = bar</span></span><br><span class=\"line\">    context.fn(); <span class=\"comment\">// foo.fn()</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.fn; <span class=\"comment\">// delete foo.fn</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar.call2(foo); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"模拟实现第二步\"><a href=\"#模拟实现第二步\" class=\"headerlink\" title=\"模拟实现第二步\"></a>模拟实现第二步</h2><p>上面改进了依然存在一个问题：<code>bar</code>不能接收参数。所以我们可以从<code>arguments</code>中获取参数，从第二个到最后一个参数放到数组中，之所以不要第一个参数，是因为第一个参数是<code>this</code>。</p>\n<p>我们知道<code>arguments</code>对象是类数组对象(类数组对象不能使用push/pop/shift/unshift等数组方法)，这里用ES3的实现把类数组对象转成数组：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>, len = <span class=\"built_in\">arguments</span>.length; i &lt; len; i++)&#123;</span><br><span class=\"line\">    args.push(<span class=\"string\">'arguments['</span> + i + <span class=\"string\">']'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行后args为[‘arguments[1]’, ‘arguments[2]’, ‘arguments[3]’]，如果直接用作参数，像这样<code>context.fn(args)</code>，那这样取到的每一个参数只是一个字符串，解决办法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">'context.fn('</span> + args + <span class=\"string\">')'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>因此，再改进的实现如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.call2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    context.fn = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>, len = <span class=\"built_in\">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        args.push(<span class=\"string\">'arguments['</span> + i + <span class=\"string\">']'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">eval</span>(<span class=\"string\">'context.fn('</span> + args + <span class=\"string\">')'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.fn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar.call2(foo, <span class=\"string\">'Cherry'</span>, <span class=\"number\">19</span>); <span class=\"comment\">// Cherry 18 1</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"模拟实现第三步\"><a href=\"#模拟实现第三步\" class=\"headerlink\" title=\"模拟实现第三步\"></a>模拟实现第三步</h2><p><code>call</code>有两小点需要注意：</p>\n<ol>\n<li>第一个参数可以传<code>null</code>，当传<code>null</code>时，视为指向<code>window</code></li>\n<li>函数是可以有返回值的</li>\n</ol>\n<p>再改进一点如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.call2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = context || <span class=\"built_in\">window</span>;</span><br><span class=\"line\">    context.fn = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>, len = <span class=\"built_in\">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        args.push(<span class=\"string\">'arguments['</span> + i + <span class=\"string\">']'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">'context.fn('</span> + args + <span class=\"string\">')'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.fn;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> value = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        value: <span class=\"keyword\">this</span>.value,</span><br><span class=\"line\">        name: name,</span><br><span class=\"line\">        age: age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar.call(<span class=\"literal\">null</span>); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar.call2(obj, <span class=\"string\">'Cherry'</span>, <span class=\"number\">18</span>));</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// Object &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    value: 1,</span></span><br><span class=\"line\"><span class=\"comment\">//    name: 'Cherry',</span></span><br><span class=\"line\"><span class=\"comment\">//    age: 18</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>上面是用ES3的语法实现的，下面用ES6实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.call2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    context = context || <span class=\"built_in\">window</span>;</span><br><span class=\"line\">    context.fn = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = [...arguments].slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = content.fn(...args);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.fn;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"模拟实现apply\"><a href=\"#模拟实现apply\" class=\"headerlink\" title=\"模拟实现apply()\"></a><strong>模拟实现apply()</strong></h1><p>我们知道<code>apply()</code>和<code>call()</code>的原理一样，只是传参方式不同，因此，模拟实现也差不多：</p>\n<p>ES3实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.apply2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = context || <span class=\"built_in\">window</span>;</span><br><span class=\"line\">    context.fn = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!arr) &#123;</span><br><span class=\"line\">        result = context.fn()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            args.push(<span class=\"string\">'arr['</span> + i + <span class=\"string\">']'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result = <span class=\"built_in\">eval</span>(<span class=\"string\">'context.fn('</span> + args + <span class=\"string\">')'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.fn;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ES6实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.apply2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, arr</span>) </span>&#123;</span><br><span class=\"line\">    context = context || <span class=\"built_in\">window</span>;</span><br><span class=\"line\">    context.fn = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!arr) &#123;</span><br><span class=\"line\">        result = context.fn();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = content.fn(...arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.fn;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","prev":{"title":"模拟实现bind()","slug":"writebind"},"next":{"title":"JS闭包和作用域","slug":"closure"},"link":"/writeallapply","toc":[{"title":"<strong>模拟实现call()</strong>","id":"模拟实现call","index":"1","children":[{"title":"call()的两个特点","id":"call-的两个特点","index":"1.1"},{"title":"模拟实现第一步","id":"模拟实现第一步","index":"1.2"},{"title":"模拟实现第二步","id":"模拟实现第二步","index":"1.3"},{"title":"模拟实现第三步","id":"模拟实现第三步","index":"1.4"}]},{"title":"<strong>模拟实现apply()</strong>","id":"模拟实现apply","index":"2"}]}