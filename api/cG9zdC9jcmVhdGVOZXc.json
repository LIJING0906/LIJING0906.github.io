{"title":"Object.create()、new Object()和{}的区别","date":"2019-08-17T01:09:28.000Z","excerpt":"","slug":"createNew","comments":true,"dropcap":true,"tags":["javaScript"],"categories":["javaScript"],"updated":"2019-12-01T13:34:23.000Z","content":"<p>平时代码中必定会使用对象，通常是用最直接的字面量方法创建<code>var obj = {}</code>，最近在整理<a href=\"https://lijing0906.github.io/post/jsInherit\" target=\"_blank\" rel=\"noopener\">JS继承方式</a>时遇到<code>Object.create()</code>也可以创建对象，另外，也可以用<code>new Object()</code>关键字创建。<br>那这三种方式有差别吗？</p>\n<h1 id=\"直接字面量创建\"><a href=\"#直接字面量创建\" class=\"headerlink\" title=\"直接字面量创建\"></a><strong>直接字面量创建</strong></h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objA = &#123;&#125;;</span><br><span class=\"line\">objA.name = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">objA.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`My name is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span> !`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// var objA = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     name: 'a',</span></span><br><span class=\"line\"><span class=\"comment\">//     sayName: function() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         console.log(`My name is $&#123;this.name&#125; !`);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\">objA.sayName();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(objA.__proto__ === <span class=\"built_in\">Object</span>.prototype); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(objA <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"new关键字创建\"><a href=\"#new关键字创建\" class=\"headerlink\" title=\"new关键字创建\"></a><strong>new关键字创建</strong></h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objB = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"comment\">// var objB = Object();</span></span><br><span class=\"line\">objB.name = <span class=\"string\">'b'</span>;</span><br><span class=\"line\">objB.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`My name is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span> !`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">objB.sayName();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(objB.__proto__ === <span class=\"built_in\">Object</span>.prototype); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(objB <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>在<a href=\"https://lijing0906.github.io/post/JSthis\" target=\"_blank\" rel=\"noopener\">JS的指向问题</a>中讲<strong>new绑定</strong>时讲了<code>new</code>操作符其实做了以下四步：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(); <span class=\"comment\">// 创建一个空对象</span></span><br><span class=\"line\">obj.__proto__ = F.prototype; <span class=\"comment\">// obj的__proto__指向构造函数的prototype</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = F.call(obj); <span class=\"comment\">// 把构造函数的this指向obj，并执行构造函数把结果赋值给result</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(result) === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    objB = result; <span class=\"comment\">// 构造函数F的执行结果是引用类型，就把这个引用类型的对象返回给objB</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    objB = obj; <span class=\"comment\">// 构造函数F的执行结果是值类型，就返回obj这个空对象给objB</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样一比较，其实字面量创建和new关键字创建并没有区别，创建的新对象的<code>__proto__</code>都指向<code>Object.prototype</code>，只是字面量创建更高效一些，少了<code>__proto__</code>指向赋值和<code>this</code>。</p>\n<h1 id=\"Object-create\"><a href=\"#Object-create\" class=\"headerlink\" title=\"Object.create()\"></a><strong>Object.create()</strong></h1><blockquote>\n<p><code>Object.create()</code>方法创建一个新对象，使用现有的对象来提供新创建的对象的<code>__proto__</code>。 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\" rel=\"noopener\">MDN</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  isHuman: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  printIntroduction: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`My name is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>. Am I human? <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.isHuman&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> me = <span class=\"built_in\">Object</span>.create(person); <span class=\"comment\">// me.__proto__ === person</span></span><br><span class=\"line\">me.name = <span class=\"string\">\"Matthew\"</span>; <span class=\"comment\">// name属性被设置在新对象me上，而不是现有对象person上</span></span><br><span class=\"line\">me.isHuman = <span class=\"literal\">true</span>; <span class=\"comment\">// 继承的属性可以被重写</span></span><br><span class=\"line\">me.printIntroduction(); <span class=\"comment\">// My name is Matthew. Am I human? true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Object.create(proto[, propertiesObject])</p>\n</blockquote>\n<ul>\n<li><p><code>proto</code>必填参数，是新对象的原型对象，如上面代码里新对象<code>me</code>的<code>__proto__</code>指向<code>person</code>。注意，如果这个参数是<code>null</code>，那新对象就彻彻底底是个空对象，没有继承<code>Object.prototype</code>上的任何属性和方法，如<code>hasOwnProperty()、toString()</code>等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(a); <span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__ === <span class=\"built_in\">Object</span>.prototype); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">// false 没有继承`Object.prototype`上的任何属性和方法，所以原型链上不会出现Object</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>propertiesObject</code>是可选参数，指定要添加到新对象上的可枚举的属性（即其自定义的属性和方法，可用<code>hasOwnProperty()</code>获取的，而不是原型对象上的）的描述符及相应的属性名称。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bb = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">    a: &#123;</span><br><span class=\"line\">        value: <span class=\"number\">2</span>,</span><br><span class=\"line\">        writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(bb); <span class=\"comment\">// &#123;a: 2&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bb.__proto__); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bb.__proto__ === <span class=\"built_in\">Object</span>.prototype); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bb <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">// false 没有继承`Object.prototype`上的任何属性和方法，所以原型链上不会出现Object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ----------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cc = <span class=\"built_in\">Object</span>.create(&#123;<span class=\"attr\">b</span>: <span class=\"number\">1</span>&#125;, &#123;</span><br><span class=\"line\">    a: &#123;</span><br><span class=\"line\">        value: <span class=\"number\">3</span>,</span><br><span class=\"line\">        writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cc); <span class=\"comment\">// &#123;a: 3&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cc.hasOwnProperty(<span class=\"string\">'a'</span>), cc.hasOwnProperty(<span class=\"string\">'b'</span>)); <span class=\"comment\">// true false 说明第二个参数设置的是新对象自身可枚举的属性</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cc.__proto__); <span class=\"comment\">// &#123;b: 1&#125; 新对象cc的__proto__指向&#123;b: 1&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cc.__proto__ === <span class=\"built_in\">Object</span>.protorype); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cc <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">// true cc是对象，原型链上肯定会出现Object</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>Object.create()</code>创建的对象的原型指向传入的对象。跟字面量和<code>new</code>关键字创建有区别。</p>\n<ul>\n<li>自己实现一个Object.create()<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.mycreate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">proto, properties</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    F.prototype = proto;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(properties) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.defineProperties(F, properties);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> hh = <span class=\"built_in\">Object</span>.mycreate(&#123;<span class=\"attr\">a</span>: <span class=\"number\">11</span>&#125;, &#123;<span class=\"attr\">mm</span>: &#123;<span class=\"attr\">value</span>: <span class=\"number\">10</span>&#125;&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(hh);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h1><ul>\n<li>字面量和<code>new</code>关键字创建的对象是<code>Object</code>的实例，原型指向<code>Object.prototype</code>，继承内置对象<code>Object</code></li>\n<li><code>Object.create(arg, pro)</code>创建的对象的原型取决于<code>arg</code>，<code>arg</code>为<code>null</code>，新对象是空对象，没有原型，不继承任何对象；<code>arg</code>为指定对象，新对象的原型指向指定对象，继承指定对象</li>\n</ul>\n","prev":{"title":"JS闭包和作用域","slug":"closure"},"next":{"title":"原型和原型链","slug":"prototypeChain"},"link":"/createNew","toc":[{"title":"<strong>直接字面量创建</strong>","id":"直接字面量创建","index":"1"},{"title":"<strong>new关键字创建</strong>","id":"new关键字创建","index":"2"},{"title":"<strong>Object.create()</strong>","id":"Object-create","index":"3"},{"title":"<strong>总结</strong>","id":"总结","index":"4"}]}