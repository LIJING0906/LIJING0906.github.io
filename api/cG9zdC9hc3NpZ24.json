{"title":"Object.assign的原理及其实现方式","date":"2019-09-22T06:20:00.000Z","excerpt":"","slug":"assign","comments":true,"dropcap":true,"tags":["javaScript"],"categories":["javaScript"],"updated":"2019-12-01T13:34:23.000Z","content":"<p>上周在总结赋值和深浅拷贝的时候提到了<code>Object.assign</code>这种浅拷贝方式。这周谈谈它的原理以及实现方式。</p>\n<h1 id=\"浅拷贝Object-assign\"><a href=\"#浅拷贝Object-assign\" class=\"headerlink\" title=\"浅拷贝Object.assign\"></a><strong>浅拷贝Object.assign</strong></h1><p>上篇文章有讲到它的定义和用法，主要是将所有<strong>可枚举属性</strong>的值从一个或多个源对象中复制到目标对象，同时返回目标对象。<br>语法如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target,  ...source)</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>target</code>是目标对象，<code>...source</code>是源对象，可以是一个或多个，返回修改后的目标对象。<br>如果目标对象和源对象具有相同属性，则目标对象的该属性将会被源对象的相同属性覆盖，后来的源对象的属性将会类似地覆盖早先的属性。</p>\n<h2 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h2><p>我们知道浅拷贝就是拷贝对象的第一层的基本类型值，以及第一层的引用类型地址。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一步</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"Kitty\"</span>,</span><br><span class=\"line\">    age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"Jane\"</span>,</span><br><span class=\"line\">    book: &#123;</span><br><span class=\"line\">        title: <span class=\"string\">\"You Don't Know JS\"</span>,</span><br><span class=\"line\">        price: <span class=\"string\">\"45\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"built_in\">Object</span>.assign(a, b);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     name: \"Jane\",</span></span><br><span class=\"line\"><span class=\"comment\">//     age: 18,</span></span><br><span class=\"line\"><span class=\"comment\">//     book: &#123;title: \"You Don't Know JS\", price: \"45\"&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125; </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a === c); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二步</span></span><br><span class=\"line\">b.name = <span class=\"string\">\"change\"</span>;</span><br><span class=\"line\">b.book.price = <span class=\"string\">\"55\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     name: \"change\",</span></span><br><span class=\"line\"><span class=\"comment\">//     book: &#123;title: \"You Don't Know JS\", price: \"55\"&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125; </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三步</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     name: \"Jane\",</span></span><br><span class=\"line\"><span class=\"comment\">//     age: 18,</span></span><br><span class=\"line\"><span class=\"comment\">//     book: &#123;title: \"You Don't Know JS\", price: \"55\"&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure></p>\n<p> 1、第一步中，使用<code>Object.assign</code>把源对象b中的属性复制到目标对象a中，把改变后的对象定义为c，可以看出b会替换掉a中相同的属性的值。上面的代码需要注意的是，返回对象c就是目标对象a。<br> 2、第二步中，修改源对象b的基本类型值（name）和引用类型值（book）。<br> 3、第三步中，浅拷贝之后目标对象a的基本类型值没有改变，但引用类型值被改变了，因为<code>Object.assign</code>拷贝的是属性值，当属性值是一个指向对象的引用时，它拷贝的那个引用地址。</p>\n<h2 id=\"示例2\"><a href=\"#示例2\" class=\"headerlink\" title=\"示例2\"></a>示例2</h2><p> <code>String</code>类型和<code>Symbol</code>类型的属性都会被拷贝，而且不会跳过那些值为<code>null</code>或<code>undefined</code>的属性。<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"Jane\"</span>,</span><br><span class=\"line\">    age: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123;</span><br><span class=\"line\">    b1: <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"Jane\"</span>),</span><br><span class=\"line\">    b2: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    b3: <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"built_in\">Object</span>.assign(a, b);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     name: \"Jane\",</span></span><br><span class=\"line\"><span class=\"comment\">//     age: 20,</span></span><br><span class=\"line\"><span class=\"comment\">//     b1: Symbol(Jane),</span></span><br><span class=\"line\"><span class=\"comment\">//     b2: null,</span></span><br><span class=\"line\"><span class=\"comment\">//     b3: undefined</span></span><br><span class=\"line\"><span class=\"comment\">// &#125; </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a === c); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Object-assign模拟实现\"><a href=\"#Object-assign模拟实现\" class=\"headerlink\" title=\"Object.assign模拟实现\"></a><strong>Object.assign模拟实现</strong></h1><p> 实现一个<code>Object.assign</code>大致思路如下:</p>\n<p> 1、判断原生<code>Object</code>是否支持该函数，如果不存在的话创建一个函数<code>assign</code>,并使用<code>Object.defineProperty</code>将该函数绑定到<code>Object</code>上。<br> 2、判断参数是否正确（目标对象不能为空，我们可以直接设置{}传递进去，但必须设置值）。<br> 3、使用<code>Object()</code>转成对象，并保存为<code>to</code>,最后返回这个对象<code>to</code>。<br> 4、使用<code>for...in</code>循环遍历出所有可枚举的自有属性。并复制给新的目标对象（<code>hasOwnProperty</code>返回非原型链上的属性）。<br> 为了方便验证方便，使用<code>assign2</code>代替<code>assign</code>，注意以下模拟实现不支持<code>symbol</code>属性，因为<code>ES5</code>中根本没有<code>symbol</code>，实现代码如下：<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.assign2 != <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Object</span>, <span class=\"string\">'assign2'</span>, &#123; <span class=\"comment\">// 注意点1</span></span><br><span class=\"line\">        value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">            'use strict'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target == <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// 注意点2</span></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Cannot convert undefined or null to object'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> to = <span class=\"built_in\">Object</span>(target); <span class=\"comment\">// 注意点3</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">1</span>; index &lt; <span class=\"built_in\">arguments</span>.length; index++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> nextSource = <span class=\"built_in\">arguments</span>[index];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nextSource != <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// 注意点2</span></span><br><span class=\"line\">                    <span class=\"comment\">// 注意点4</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> nextKey <span class=\"keyword\">in</span> nextSource) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(nextSource, nextKey)) &#123;</span><br><span class=\"line\">                            to[nextKey] = nextSource[nextKey];</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> to;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> 测试一下：<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"advanced\"</span>,</span><br><span class=\"line\">    age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"Jane\"</span>,</span><br><span class=\"line\">    book: &#123;</span><br><span class=\"line\">        title: <span class=\"string\">\"You Don't Know JS\"</span>,</span><br><span class=\"line\">        price: <span class=\"string\">\"45\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"built_in\">Object</span>.assign2(a, b);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     name: \"Jane\",</span></span><br><span class=\"line\"><span class=\"comment\">//     age: 18,</span></span><br><span class=\"line\"><span class=\"comment\">//     book: &#123;title: \"You Don't Know JS\", price: \"45\"&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125; </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a === c); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"注意点1-可枚举型\"><a href=\"#注意点1-可枚举型\" class=\"headerlink\" title=\"注意点1 可枚举型\"></a>注意点1 可枚举型</h2><p> 原生情况下挂载在<code>Object</code>上的属性是不可枚举的，但是直接在<code>Object</code>上挂载属性<code>a</code>之后是可枚举的，所以必须使用<code>Object.defineProperty</code>，并设置<code>enumerable: false</code>和<code>writable: true, configurable: true</code>。<br> 以下代码说明<code>Object</code>上的属性不可枚举：<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 无输出</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(<span class=\"built_in\">Object</span>); <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure></p>\n<p> 我们可以使用2种方法查看<code>Object.assign</code>是否可枚举，使用<code>Object.getOwnPropertyDescriptor</code>或者<code>Object.propertyIsEnumerable</code>都可以，其中<code>propertyIsEnumerable(...)</code>会检查给定的属性名是否直接存在于对象中（而不是在原型链上）并且满足<code>enumerable: true</code>。具体用法如下：<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(<span class=\"built_in\">Object</span>, <span class=\"string\">'assign'</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     value: ƒ, </span></span><br><span class=\"line\"><span class=\"comment\">//     writable: true,     // 可写</span></span><br><span class=\"line\"><span class=\"comment\">//     enumerable: false,  // 不可枚举，注意这里是 false</span></span><br><span class=\"line\"><span class=\"comment\">//     configurable: true  // 可配置</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.propertyIsEnumerable(<span class=\"string\">'assign'</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p>来看看直接在<code>Object</code>上挂载属性<code>a</code>之后可枚举的情况：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'log a'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnpropertyDescriptor(<span class=\"built_in\">Object</span>, <span class=\"string\">'a'</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//      value: ƒ, </span></span><br><span class=\"line\"><span class=\"comment\">//      writable: true, </span></span><br><span class=\"line\"><span class=\"comment\">//      enumerable: true,  // 注意这里是 true</span></span><br><span class=\"line\"><span class=\"comment\">//      configurable: true</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.propertyIsEnumerable(<span class=\"string\">'a'</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<p>因为<code>Object.assign</code>是不可枚举的，所以不能用直接挂载的方式（可枚举）来模拟实现，必须用<code>Object.defineProperty</code>来设置<code>writable: true, enumerable: false, configurable: true</code>，当然默认情况下都是<code>false</code>。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Object</span>, <span class=\"string\">'b'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'log b'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(<span class=\"built_in\">Object</span>, <span class=\"string\">'b'</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     value: ƒ, </span></span><br><span class=\"line\"><span class=\"comment\">//     writable: false,     // 可写</span></span><br><span class=\"line\"><span class=\"comment\">//     enumerable: false,  // 不可枚举，注意这里是 false</span></span><br><span class=\"line\"><span class=\"comment\">//     configurable: false  // 可配置</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"注意点2-判断参数是否正确\"><a href=\"#注意点2-判断参数是否正确\" class=\"headerlink\" title=\"注意点2 判断参数是否正确\"></a>注意点2 判断参数是否正确</h2><p>因为<code>undefined</code>和<code>null</code>是相等的，即<code>undefined == null</code>返回<code>true</code>，只需要按照如下方式判断就好了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (target == <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// TypeError if undefined or null</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Cannot convert undefined or null to object'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"注意点3-原始类型被包装为对象\"><a href=\"#注意点3-原始类型被包装为对象\" class=\"headerlink\" title=\"注意点3 原始类型被包装为对象\"></a>注意点3 原始类型被包装为对象</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v1 = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> v2 = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> v3 = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> v4 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.assgin(&#123;&#125;, v1, <span class=\"literal\">null</span>, v2, <span class=\"literal\">undefined</span>, v3, v4);</span><br><span class=\"line\"><span class=\"comment\">// 原始类型会被包装，null和undefined会被忽略</span></span><br><span class=\"line\"><span class=\"comment\">// 注意，只有字符串的包装对象才可能有自身可枚举属性</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123;'0': 'a', '1': 'b', '2': 'c'&#125;</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码可以看出v1、v2、v3实际上被忽略了，原因在于他们自身没有<strong>可枚举属性</strong>。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v1 = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> v2 = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> v3 = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> v4 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Object.keys() 返回一个数组，包含所有可枚举属性</span></span><br><span class=\"line\"><span class=\"comment\">// 只会查找对象直接包含的属性，不查找[[Prototype]]链</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys( v1 ); <span class=\"comment\">// [ '0', '1', '2' ]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys( v2 ); <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys( v3 ); <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys( v4 ); <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys( v5 ); <span class=\"comment\">// TypeError: Cannot convert undefined or null to object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Object.getOwnPropertyNames(..) 返回一个数组，包含所有属性，无论它们是否可枚举</span></span><br><span class=\"line\"><span class=\"comment\">// 只会查找对象直接包含的属性，不查找[[Prototype]]链</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames( v1 ); <span class=\"comment\">// [ '0', '1', '2', 'length' ]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames( v2 ); <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames( v3 ); <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames( v4 ); <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames( v5 ); <span class=\"comment\">// TypeError: Cannot convert undefined or null to object</span></span><br></pre></td></tr></table></figure></p>\n<p>但是下面的代码是可以执行的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123;</span><br><span class=\"line\">    v1: <span class=\"string\">'def'</span>,</span><br><span class=\"line\">    v2: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    v3: <span class=\"number\">10</span>,</span><br><span class=\"line\">    v4: <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>),</span><br><span class=\"line\">    v5: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    v6: <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = Objec.assign(a, b);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     [String: 'abc']</span></span><br><span class=\"line\"><span class=\"comment\">//     v1: 'def',</span></span><br><span class=\"line\"><span class=\"comment\">//     v2: true,</span></span><br><span class=\"line\"><span class=\"comment\">//     v3: 10,</span></span><br><span class=\"line\"><span class=\"comment\">//     v4: Symbol('foo'),</span></span><br><span class=\"line\"><span class=\"comment\">//     v5: null,</span></span><br><span class=\"line\"><span class=\"comment\">//     v6: undefined</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>原因很简单，因为此时<code>undefined</code>、<code>true</code>等不适 作为对象，而是作为对象<code>b</code>的属性值，对象<code>b</code>是可枚举的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.keys(b); <span class=\"comment\">// [ 'v1', 'v2', 'v3', 'v4', 'v5', 'v6' ]</span></span><br></pre></td></tr></table></figure></p>\n<p>这里其实又可以看出一个问题来，那就是目标对象如果是原始类型，会被包装成对象，对应上面的代码就是目标对象<code>a</code>会被包装成<code>[String: &#39;abc&#39;]</code>，那模拟实现时应该如何处理呢？很简单，使用<code>Object()</code>就OK。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>(a)); <span class=\"comment\">// [String: 'abc']</span></span><br></pre></td></tr></table></figure></p>\n<p>到这里已经介绍了很多知识了，让我们再来延伸一下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">'def'</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(a, b); <span class=\"comment\">// TypeError: Cannot assign to read only property '0' of object '[object String]'</span></span><br></pre></td></tr></table></figure></p>\n<p>报错的原因在于<code>Object.assgin()</code>时，其属性描述符为不可写，即<code>writable: false</code>。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = <span class=\"built_in\">Object</span>(<span class=\"string\">'abc'</span>);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(myObject);</span><br><span class=\"line\"><span class=\"comment\">// [ '0', '1', '2', 'length' ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(myObject, <span class=\"string\">'0'</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123; </span></span><br><span class=\"line\"><span class=\"comment\">//   value: 'a',</span></span><br><span class=\"line\"><span class=\"comment\">//   writable: false, // 注意这里</span></span><br><span class=\"line\"><span class=\"comment\">//   enumerable: true,</span></span><br><span class=\"line\"><span class=\"comment\">//   configurable: false </span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"注意点4-存在性\"><a href=\"#注意点4-存在性\" class=\"headerlink\" title=\"注意点4 存在性\"></a>注意点4 存在性</h2><p>如何在不访问属性值的情况下判断对象中是否存在某个属性呢：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> anotherObject = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个关联到anotherObject的对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObject = <span class=\"built_in\">Object</span>.create(anotherObject);</span><br><span class=\"line\">myObject.b = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"string\">'a'</span> <span class=\"keyword\">in</span> myObject); <span class=\"comment\">// true</span></span><br><span class=\"line\">(<span class=\"string\">'b'</span> <span class=\"keyword\">in</span> myObject); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">myObject.hasOwnProperty(<span class=\"string\">'a'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">myObject.hasOwnProperty(<span class=\"string\">'b'</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<p>上边用<code>in</code>操作符和<code>hasOwnProperty</code>方法，区别如下：</p>\n<ol>\n<li><code>in</code>操作符会检查属性是否在对象及其<code>[[Prototype]]</code>原型链上</li>\n<li><code>hasOwnProperty()</code>只会检查属性是否存在于<code>myObject</code>对象中，不会检查<code>[[Prototype]]</code>原型链<br><code>Object.assign</code>方法肯定不会拷贝原型链上的属性，所以模拟实现时需要用<code>hasOwnProperty()</code>判断处理下，但是直接使用<code>myObject.hasOwnProperty()</code>是有问题的，因为有的对象可能没有连接到<code>Object.prototype</code>上（比如通过 <code>Object.create(null)</code>来创建），这种情况下，使用<code>myObject.hasOwnProperty()</code>就会失败。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">myObject.b = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"string\">'b'</span> <span class=\"keyword\">in</span> myObject); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">myObject.hasOwnProperty( <span class=\"string\">'b'</span> ); <span class=\"comment\">// TypeError: myObject.hasOwnProperty is not a function</span></span><br></pre></td></tr></table></figure>\n<p>解决方法也很简单，使用之前介绍的<code>call</code>就可以了，使用如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">myObject.b = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(myObject, <span class=\"string\">'b'</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://mp.weixin.qq.com/s/qiBPkiWTZ0FQIEaQjFgcNA\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n","prev":{"title":"浏览器进程、JS事件循环机制、宏任务和微任务","slug":"beforePromise"},"next":{"title":"赋值、浅拷贝和深拷贝的区别","slug":"copy"},"link":"/assign","toc":[{"title":"<strong>浅拷贝Object.assign</strong>","id":"浅拷贝Object-assign","index":"1","children":[{"title":"示例1","id":"示例1","index":"1.1"},{"title":"示例2","id":"示例2","index":"1.2"}]},{"title":"<strong>Object.assign模拟实现</strong>","id":"Object-assign模拟实现","index":"2","children":[{"title":"注意点1 可枚举型","id":"注意点1-可枚举型","index":"2.1"},{"title":"注意点2 判断参数是否正确","id":"注意点2-判断参数是否正确","index":"2.2"},{"title":"注意点3 原始类型被包装为对象","id":"注意点3-原始类型被包装为对象","index":"2.3"},{"title":"注意点4 存在性","id":"注意点4-存在性","index":"2.4"}]}]}