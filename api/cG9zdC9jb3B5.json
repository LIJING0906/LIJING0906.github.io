{"title":"赋值、浅拷贝和深拷贝的区别","date":"2019-09-13T03:36:02.000Z","excerpt":"","slug":"copy","comments":true,"dropcap":true,"tags":["javaScript"],"categories":["javaScript"],"updated":"2019-12-01T13:34:23.000Z","content":"<p>中秋快乐！</p>\n<p>今天放假，想总结一下赋值、浅拷贝和深拷贝的区别。</p>\n<h1 id=\"赋值（Copy）\"><a href=\"#赋值（Copy）\" class=\"headerlink\" title=\"赋值（Copy）\"></a><strong>赋值（Copy）</strong></h1><p>赋值是将某一数值或对象赋给某个变量的过程，分两种情况：</p>\n<ul>\n<li>基本数据类型：赋值，赋值后两个变量互不影响</li>\n<li>引用数据类型: 赋<strong>址</strong>，两个变量指向同一个地址，同一个对象，相互之间有影响</li>\n</ul>\n<p>对基本数据类型的赋值，两个变量相互不影响：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\">a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure></p>\n<p>对引用数据类型进行赋址操作，两个变量指向同一个对象，改变变量a的值会影响变量b的值，哪怕改变的只是对象a中的基础数据类型：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Jane'</span>,</span><br><span class=\"line\">    book: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'Vue.js'</span>,</span><br><span class=\"line\">        price: <span class=\"number\">50</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\">b.name = <span class=\"string\">'hahaha'</span>;</span><br><span class=\"line\">b.book.price = <span class=\"number\">52</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// &#123; name: 'hahaha', book: &#123; name: 'Vue.js', price: 52 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// &#123; name: 'hahaha', book: &#123; name: 'Vue.js', price: 52 &#125; &#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>通常开发中我们不希望出现这种相互影响的情况，所以需要浅拷贝或者深拷贝。</p>\n<h1 id=\"浅拷贝（Shallow-Copy）\"><a href=\"#浅拷贝（Shallow-Copy）\" class=\"headerlink\" title=\"浅拷贝（Shallow Copy）\"></a><strong>浅拷贝（Shallow Copy）</strong></h1><h2 id=\"什么是浅拷贝\"><a href=\"#什么是浅拷贝\" class=\"headerlink\" title=\"什么是浅拷贝\"></a>什么是浅拷贝</h2><p>新建一个对象，这个对象有原始对象属性值的一份精确拷贝。如果属性是基本数据类型，拷贝的是基本数据类型的值；如果属性是引用类型，拷贝的是内存地址，所以如果一个对象改变了这个地址，就会影响到另外一个对象。<br><img src=\"/2019/09/13/copy/shallowcopy.png\" alt=\"\"><br>图中，<code>SourceObject</code>是原始对象，有基本数据类型<code>field1</code>和引用数据类型<code>refObj</code>。浅拷贝之后，<code>field1</code>和<code>field2</code>是不同属性，互不影响。<code>refObj</code>是同一个对象，改变之后会影响另一个对象。</p>\n<p>简单地说，浅拷贝只解决了第一层的问题，即第一层的基本数据类型和引用类型数据的引用地址。</p>\n<h2 id=\"浅拷贝的应用场景\"><a href=\"#浅拷贝的应用场景\" class=\"headerlink\" title=\"浅拷贝的应用场景\"></a>浅拷贝的应用场景</h2><ol>\n<li>Object.assign()</li>\n</ol>\n<p><code>Object.assign()</code>把所有可枚举属性从一个或多个对象复制到目标对象，返回目标对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Jane'</span>,</span><br><span class=\"line\">    book: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'Vue.js'</span>,</span><br><span class=\"line\">        price: <span class=\"number\">50</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a);</span><br><span class=\"line\">b.name = <span class=\"string\">'hahaha'</span>;</span><br><span class=\"line\">b.book.price = <span class=\"number\">52</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// &#123; name: 'Jane', book: &#123; name: 'Vue.js', price: 52 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// &#123; name: 'hahaha', book: &#123; name: 'Vue.js', price: 52 &#125; &#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>上面的代码可以看出，基本数据类型的属性<code>name</code>的值没有改变，而引用类型的属性<code>book</code>的值改变就会影响到另一个对象。</p>\n<ol start=\"2\">\n<li>展开语法 Spread</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Jane'</span>,</span><br><span class=\"line\">    book: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'Vue.js'</span>,</span><br><span class=\"line\">        price: <span class=\"number\">50</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123;...a&#125;;</span><br><span class=\"line\">b.name = <span class=\"string\">'hahaha'</span>;</span><br><span class=\"line\">b.book.price = <span class=\"number\">52</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// &#123; name: 'Jane', book: &#123; name: 'Vue.js', price: 52 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// &#123; name: 'hahaha', book: &#123; name: 'Vue.js', price: 52 &#125; &#125;</span></span><br></pre></td></tr></table></figure>\n<p>效果跟<code>Object.assign()</code>一样。</p>\n<ol start=\"3\">\n<li>Array.prototype.slice()</li>\n</ol>\n<p><code>slice()</code>方法返回一个新的数组对象，这个对象是由<code>begin</code>和<code>end</code>（不包括<code>end</code>）决定的原数组的浅拷贝。原数组不会被改变。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">0</span>, <span class=\"string\">'1'</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.slice(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// ['1', [2, 3]]</span></span><br><span class=\"line\">a[<span class=\"number\">1</span>] = <span class=\"string\">'99'</span>;</span><br><span class=\"line\">a[<span class=\"number\">2</span>][<span class=\"number\">0</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// [0, '99', [4, 3]]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// ['1', [4, 3]]</span></span><br></pre></td></tr></table></figure></p>\n<p>从上面的代码可以看出，<code>a[1]</code>改变之后<code>b[0]</code>并没有改变，<code>a[2][0]</code>改变之后相应的<code>b[1][0]</code>跟着改变了。说明<code>slice()</code>是浅拷贝，相应的还有<code>concat</code>等。</p>\n<h1 id=\"深拷贝（Deep-Copy）\"><a href=\"#深拷贝（Deep-Copy）\" class=\"headerlink\" title=\"深拷贝（Deep Copy）\"></a><strong>深拷贝（Deep Copy）</strong></h1><h2 id=\"什么是深拷贝\"><a href=\"#什么是深拷贝\" class=\"headerlink\" title=\"什么是深拷贝\"></a>什么是深拷贝</h2><p>深拷贝会拷贝所有的属性，并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。深拷贝相较于浅拷贝速度慢并且花销更大。深拷贝的两个对象互不影响。<br><img src=\"/2019/09/13/copy/deepcopy.png\" alt=\"\"></p>\n<h2 id=\"深拷贝的使用场景\"><a href=\"#深拷贝的使用场景\" class=\"headerlink\" title=\"深拷贝的使用场景\"></a>深拷贝的使用场景</h2><p><code>JSON.parse(JSON.stringify(object))</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Jane'</span>,</span><br><span class=\"line\">    book: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'Vue.js'</span>,</span><br><span class=\"line\">        price: <span class=\"number\">50</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(a));</span><br><span class=\"line\">b.name = <span class=\"string\">'hahaha'</span>;</span><br><span class=\"line\">b.book.price = <span class=\"number\">52</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// &#123; name: 'Jane', book: &#123; name: 'Vue.js', price: 50 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// &#123; name: 'hahaha', book: &#123; name: 'Vue.js', price: 52 &#125; &#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>深拷贝之后，两个对象互不影响。</p>\n<p>看看深拷贝数组：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">0</span>, <span class=\"string\">'1'</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(a));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// [0, '1', [2, 3]]</span></span><br><span class=\"line\">a[<span class=\"number\">1</span>] = <span class=\"string\">'99'</span>;</span><br><span class=\"line\">a[<span class=\"number\">2</span>][<span class=\"number\">0</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// [0, '99', [4, 3]]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// [0, '1', [2, 3]]</span></span><br></pre></td></tr></table></figure></p>\n<p>深拷贝数组，两个数组也互不影响。</p>\n<h2 id=\"JSON-parse-JSON-stringify-object-存在的问题\"><a href=\"#JSON-parse-JSON-stringify-object-存在的问题\" class=\"headerlink\" title=\"JSON.parse(JSON.stringify(object))存在的问题\"></a>JSON.parse(JSON.stringify(object))存在的问题</h2><ol>\n<li>会忽略<code>undefined</code></li>\n<li>会忽略<code>symbol</code></li>\n<li>不能序列化函数</li>\n<li>不能解决循环引用对象</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Jane'</span>,</span><br><span class=\"line\">    a: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    b: <span class=\"built_in\">Symbol</span>(<span class=\"string\">'Jane'</span>),</span><br><span class=\"line\">    c: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     name: 'Jane', </span></span><br><span class=\"line\"><span class=\"comment\">//     a: undefined, </span></span><br><span class=\"line\"><span class=\"comment\">//     b: Symbol(Jane), </span></span><br><span class=\"line\"><span class=\"comment\">//     c: ƒ ()</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"comment\">// &#123;name: 'Jane'&#125;</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码说明不能正确处理<code>undefined</code>、<code>symbol</code>和函数。<br>下面看看循环引用对象的情况：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: &#123;</span><br><span class=\"line\">        c: <span class=\"number\">2</span>,</span><br><span class=\"line\">           d: <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.a = obj.b;</span><br><span class=\"line\">obj.b.c = obj.a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj));</span><br></pre></td></tr></table></figure></p>\n<p>执行上面的代码会报错：<br><img src=\"/2019/09/13/copy/deepcopyError.png\" alt=\"\"><br>深拷贝除了<code>JSON.parse(JSON.stringify(object))</code>，还有<code>jQuery.extend()</code>和<code>lodash.cloneDeep()</code>，后续文章研究。</p>\n","prev":{"title":"Object.assign的原理及其实现方式","slug":"assign"},"next":{"title":"模拟实现bind()","slug":"writebind"},"link":"/copy","toc":[{"title":"<strong>赋值（Copy）</strong>","id":"赋值（Copy）","index":"1"},{"title":"<strong>浅拷贝（Shallow Copy）</strong>","id":"浅拷贝（Shallow-Copy）","index":"2","children":[{"title":"什么是浅拷贝","id":"什么是浅拷贝","index":"2.1"},{"title":"浅拷贝的应用场景","id":"浅拷贝的应用场景","index":"2.2"}]},{"title":"<strong>深拷贝（Deep Copy）</strong>","id":"深拷贝（Deep-Copy）","index":"3","children":[{"title":"什么是深拷贝","id":"什么是深拷贝","index":"3.1"},{"title":"深拷贝的使用场景","id":"深拷贝的使用场景","index":"3.2"},{"title":"JSON.parse(JSON.stringify(object))存在的问题","id":"JSON-parse-JSON-stringify-object-存在的问题","index":"3.3"}]}]}