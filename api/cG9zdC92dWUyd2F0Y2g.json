{"title":"vue2.x的监听watch小爆料","date":"2018-08-22T04:16:00.000Z","thumbnail":null,"excerpt":"","slug":"vue2watch","comments":true,"dropcap":true,"tags":["vue2.x"],"categories":["vue"],"updated":"2019-12-01T13:34:23.000Z","content":"<p>跟vue相爱相杀这么久了，今天第一次来爆点小料(主要还是为自己做笔记)——vue2的watch监听</p>\n<h1 id=\"路由监听-也适用于普通变量（基本数据类型）的监听\"><a href=\"#路由监听-也适用于普通变量（基本数据类型）的监听\" class=\"headerlink\" title=\"路由监听,也适用于普通变量（基本数据类型）的监听\"></a><strong>路由监听,也适用于普通变量（基本数据类型）的监听</strong></h1><h3 id=\"一、写法一-普通监听\"><a href=\"#一、写法一-普通监听\" class=\"headerlink\" title=\"一、写法一,普通监听\"></a>一、写法一,普通监听</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    $route(nVal, oVal)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(nVal) <span class=\"comment\">//打印的是路由对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、写法二，深度监听\"><a href=\"#二、写法二，深度监听\" class=\"headerlink\" title=\"二、写法二，深度监听\"></a>二、写法二，深度监听</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    handler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nVal, oVal</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(nVal) <span class=\"comment\">//打印的是路由对象</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    deep: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、普通监听和深度监听的区别\"><a href=\"#三、普通监听和深度监听的区别\" class=\"headerlink\" title=\"三、普通监听和深度监听的区别\"></a>三、普通监听和深度监听的区别</h3><p>普通监听只能监听普通（基本数据类型）的变量，如果想监听对象或者数组的变化，就需要深度监听。<br>但这里路由是特殊的，既能用普通监听，也能用深度监听</p>\n<h3 id=\"四、写法三，调用监听方法\"><a href=\"#四、写法三，调用监听方法\" class=\"headerlink\" title=\"四、写法三，调用监听方法\"></a>四、写法三，调用监听方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    <span class=\"string\">'$route'</span>: <span class=\"string\">'getRoute'</span> <span class=\"comment\">//$route:'getRoute'也OK </span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    getRoute()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$route.path) <span class=\"comment\">//打印的是路由对象的path属性</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"五、写法四，立即执行或阻止复用\"><a href=\"#五、写法四，立即执行或阻止复用\" class=\"headerlink\" title=\"五、写法四，立即执行或阻止复用\"></a>五、写法四，立即执行或阻止复用</h3><p>有这样一种场景，page/a跳转到page/b，这两个页面是同一个组件，结果就是路径变了，但是组件的内容没变，造成这个结果的原因是：vue-router检测到这是同一个组件，决定复用这个组件，<br>所以写在钩子里的方法不会执行。有两个解决方法：</p>\n<ol>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'$route'</span>: &#123;</span><br><span class=\"line\">    handler: <span class=\"string\">'getRoute'</span>, <span class=\"comment\">//处理方法，写在methods里即可</span></span><br><span class=\"line\">    immediate: <span class=\"literal\">true</span> <span class=\"comment\">//立即执行 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">:key</span>=<span class=\"string\">'$route.fullpath'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>通过绑定唯一的值来阻止复用，可以说是一劳永逸，但是会牺牲一点点性能，鱼和熊掌不可兼得</p>\n<h1 id=\"监听对象，也适用于数组的监听\"><a href=\"#监听对象，也适用于数组的监听\" class=\"headerlink\" title=\"监听对象，也适用于数组的监听\"></a><strong>监听对象，也适用于数组的监听</strong></h1><p>前面的路由监听中已经提到深度监听能监听对象和数组的变化</p>\n<h3 id=\"一、对象整体的监听\"><a href=\"#一、对象整体的监听\" class=\"headerlink\" title=\"一、对象整体的监听\"></a>一、对象整体的监听</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        aObj:&#123;</span><br><span class=\"line\">            aProp: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">            bProp: <span class=\"string\">'b'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    aObj: &#123;</span><br><span class=\"line\">        handler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nVal, oVal</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(nVal) <span class=\"comment\">//打印的是aObj这个对象</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        deep: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、对象某个属性的监听-这个也适用于对vuex的监听\"><a href=\"#二、对象某个属性的监听-这个也适用于对vuex的监听\" class=\"headerlink\" title=\"二、对象某个属性的监听,这个也适用于对vuex的监听\"></a>二、对象某个属性的监听,这个也适用于对vuex的监听</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        aObj:&#123;</span><br><span class=\"line\">            aProp: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">            bProp: <span class=\"string\">'b'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    getA()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.aObj.aProp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    getA: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nVal, oVal</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(nVal)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"最后的最后\"><a href=\"#最后的最后\" class=\"headerlink\" title=\"最后的最后\"></a><strong>最后的最后</strong></h1><p>以上是我目前工作中用到过的vue2的监听，主要目的还是为自己记笔记<br>工作太忙，没有心思继续搞动态的hexo博客了，先暂时用静态的吧</p>\n","prev":{"title":"JS字符串编码","slug":"jsencode"},"next":{"title":"hexo主题更换以及怎么写博客","slug":"hexotheme"},"link":"/vue2watch","toc":[{"title":"<strong>路由监听,也适用于普通变量（基本数据类型）的监听</strong>","id":"路由监听-也适用于普通变量（基本数据类型）的监听","index":"1"},{"title":"<strong>监听对象，也适用于数组的监听</strong>","id":"监听对象，也适用于数组的监听","index":"2"},{"title":"<strong>最后的最后</strong>","id":"最后的最后","index":"3"}]}