{"title":"原型和原型链","date":"2019-08-10T02:55:18.000Z","excerpt":"","slug":"prototypeChain","comments":true,"dropcap":true,"tags":["javaScript"],"categories":["javaScript"],"updated":"2019-12-01T13:34:23.000Z","content":"<p>JavaScript是一门面向对象的设计语言，在JS里除了<code>null</code>和<code>undefined</code>，其余一切皆为对象，是对象就会有原型、构造函数、原型对象，就会有原型链。<br>之前写<a href=\"https://lijing0906.github.io/post/jsInherit\" target=\"_blank\" rel=\"noopener\">javaScript的继承方案</a>时，讲到继承依据的原理就是构造函数、实例对象、原型对象之间的三角关系，这只是原型链上的一小部分。<br>今天详细梳理一下原型和原型链的知识。<br><a href=\"https://juejin.im/post/58f94c9bb123db411953691b\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<h1 id=\"先解释一下三角关系\"><a href=\"#先解释一下三角关系\" class=\"headerlink\" title=\"先解释一下三角关系\"></a><strong>先解释一下三角关系</strong></h1><p><img src=\"/2019/08/10/prototypeChain/prototypeChain.png\" alt=\"\"><br>JS采用构造器(<code>constructor</code>)生成一个新的实例对象(<code>instance</code>)，每个构造器都拥有一个<code>prototype</code>属性，指向该构造器原型(<code>prototype</code>)；每个通过此构造器生成的实例对象都有一个内部私有指针(<code>__proto__</code>)，也指向该构造器原型(<code>prototype</code>)，这也就保证了实例对象能够访问构造器原型中的属性和方法；构造器原型也有一个属性<code>constructor</code>，这个属性指回原构造器。（这段话中的构造器就是构造函数，构造器原型就是原型对象）</p>\n<h1 id=\"简单概括一下原型链\"><a href=\"#简单概括一下原型链\" class=\"headerlink\" title=\"简单概括一下原型链\"></a><strong>简单概括一下原型链</strong></h1><p><img src=\"/2019/08/10/prototypeChain/wholePrototypeChain.jpg\" alt=\"\"><br>这是完整的原型链，一图胜千言，理解了这张图就理解了JS的原型链。JS的继承就通过图中<code>__proto__</code>这条原型链实现。</p>\n<ul>\n<li>如果试图访问对象(实例<code>instance</code>)的某个属性会首先在该对象内部寻找该属性，如果找不到，就在该对象的原型(<code>instance.__proto__</code>)里去找，若找到了便可以继承这个属性，如果该对象的原型上也没有，那就去<code>Object.prototype</code>上找，若找到了便可以继承这个属性，如果还找不到就报<code>undefined</code>或<code>null</code>，这种实例与原型的链条关系就是原型链，指的就是图中的<code>__proto__</code>指针链，图中有多条指针链。</li>\n<li>原型链的顶层是<code>Object.prototype</code>，而这个对象是没有原型对象的，可以在控制台 <code>console.log(Object.prototype.__proto__);</code>，输出结果是<code>null</code>。</li>\n<li>要明确一点：函数(<code>Function</code>)才有<code>prototype</code>属性，对象(除<code>Object</code>)拥有<code>__proto__`</code>。<h1 id=\"确定原型和实例的关系\"><a href=\"#确定原型和实例的关系\" class=\"headerlink\" title=\"确定原型和实例的关系\"></a><strong>确定原型和实例的关系</strong></h1>既然存在原型链，我们怎么去判断原型和实例的这种继承关系呢？</li>\n</ul>\n<ol>\n<li>instanceof操作符</li>\n</ol>\n<p><code>instanceof</code>操作符用来测试对象是否是构造函数<code>new</code>出来的，这种说法比较狭隘，一种放之四海而皆准的说法是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof\" target=\"_blank\" rel=\"noopener\">测试构造函数的prototype属性是否出现在对象的原型链中的任何位置</a>。返回<code>true</code>或<code>false</code>。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.age = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">// 原型链继承</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Coder</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'Jane'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这里是关键，创建Person的实例，并将该实例赋值给Coder.prototype</span></span><br><span class=\"line\">Coder.prototype = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"keyword\">var</span> coder1 = <span class=\"keyword\">new</span> Coder();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(coder1.age); <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"comment\">// instanceof操作符检测</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(coder1 <span class=\"keyword\">instanceof</span> Person); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>isPrototypeOf()方法</li>\n</ol>\n<p>跟<code>instanceo</code>f操作符作用相同，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\" target=\"_blank\" rel=\"noopener\">isPrototypeOf() 方法用于测试一个对象是否存在于另一个对象的原型链上</a>,不同点是：</p>\n<blockquote>\n<p><code>isPrototypeOf()</code>与<code>instanceof</code>运算符不同。在表达式 “<code>object instanceof AFunction</code>“中，<code>object</code>的原型链是针对<code>AFunction.prototype</code>进行检查的，而不是针对<code>AFunction</code>本身。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// isPrototypeOf操作符检测</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Person.prototype.isPrototypeOf(coder1)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>","prev":{"title":"Object.create()、new Object()和{}的区别","slug":"createNew"},"next":{"title":"call()、apply()、bind()的区别","slug":"callapplybind"},"link":"/prototypeChain","toc":[{"title":"<strong>先解释一下三角关系</strong>","id":"先解释一下三角关系","index":"1"},{"title":"<strong>简单概括一下原型链</strong>","id":"简单概括一下原型链","index":"2"},{"title":"<strong>确定原型和实例的关系</strong>","id":"确定原型和实例的关系","index":"3"}]}