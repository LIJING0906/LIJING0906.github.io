{"title":"Promise面试题","date":"2019-12-01T13:16:55.000Z","excerpt":"","slug":"promiseTest","comments":true,"dropcap":true,"tags":["javaScript"],"categories":["javaScript"],"updated":"2019-12-01T13:34:23.000Z","content":"<p>前面的文章梳理了一下有关浏览器进程、事件循环机制、微任务和红任务、Promise的相关知识，这篇文章想讲讲有关这些知识的一些面试题。<br><a href=\"https://www.jianshu.com/p/65a71f3b8e35\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n<h1 id=\"题目一\"><a href=\"#题目一\" class=\"headerlink\" title=\"题目一\"></a><strong>题目一</strong></h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">    resolve()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出结果如下：</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p><strong>解读：</strong> </p>\n<ol>\n<li>代码从上往下被放入执行栈中，执行栈先执行所有的同步任务，当遇到异步任务时，把异步任务挂起，等待执行栈中没有同步任务了，就从任务队列中取出异步任务来执行，</li>\n<li>Promise的创建是同步的，因此会先打印1，遇到异步任务resolve()就把resolve()推入事件队列，</li>\n<li>继续执行resolve()之后的同步任务，所以打印2，</li>\n<li>promise.then()是异步任务，等待执行栈空闲再执行，</li>\n<li>执行同步任务打印 4，</li>\n<li>执行栈中没有同步任务，取出异步任务开始执行，因此打印 3。</li>\n</ol>\n<h1 id=\"题目二\"><a href=\"#题目二\" class=\"headerlink\" title=\"题目二\"></a><strong>题目二</strong></h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> promise2 = promise1.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error!!!'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>, promise1)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'promise2'</span>, promise2)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>, promise1)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise2'</span>, promise2)</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\"><span class=\"comment\">// 执行结果如下：</span></span><br><span class=\"line\"><span class=\"comment\">// promise1 Promise &#123; &lt;pending&gt; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// promise2 Promise &#123; &lt;pending&gt; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// (node:50928) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: error!!!</span></span><br><span class=\"line\"><span class=\"comment\">// (node:50928) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.</span></span><br><span class=\"line\"><span class=\"comment\">// promise1 Promise &#123; 'success' &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// promise2 Promise &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;rejected&gt; Error: error!!!</span></span><br><span class=\"line\"><span class=\"comment\">//    at promise.then (...)</span></span><br><span class=\"line\"><span class=\"comment\">//    at &lt;anonymous&gt; &#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>解读：</strong> promise 有 3 种状态：pending、fulfilled 和 rejected 。状态改变只能是 pending-&gt;fulfilled 或者 pending-&gt;rejected ，状态一旦改变则不能再变。上面 promise2 并不是 promise1 ，而是返回的一个新的 Promise 实例。</p>\n<h1 id=\"题目三\"><a href=\"#题目三\" class=\"headerlink\" title=\"题目三\"></a><strong>题目三</strong></h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'success1'</span>)</span><br><span class=\"line\">  reject(<span class=\"string\">'error'</span>)</span><br><span class=\"line\">  resolve(<span class=\"string\">'success2'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'then: '</span>, res)</span><br><span class=\"line\"> &#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch: '</span>, err)</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"> <span class=\"comment\">// 执行结果如下：</span></span><br><span class=\"line\"> <span class=\"comment\">// then: success1</span></span><br></pre></td></tr></table></figure>\n<p><strong>解读：</strong>  Promise 的 resolve 或 reject 只有第一次执行有效，多次调用没有任何作用，呼应代码二结论： promise 状态一旦改变则不能再变。</p>\n<h1 id=\"题目四\"><a href=\"#题目四\" class=\"headerlink\" title=\"题目四\"></a><strong>题目四</strong></h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">1</span>).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\"> &#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">3</span></span><br><span class=\"line\"> &#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"> <span class=\"comment\">// 执行结果如下：</span></span><br><span class=\"line\"> <span class=\"comment\">// 1</span></span><br><span class=\"line\"> <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p><strong>解读：</strong> promise 可以链式调用。提起链式调用我们通常会想到通过 return this 实现，不过 Promise 并不是这样实现的。promise 每次调用 .then 或者 .catch 都会返回一个新的 promise，从而实现了链式调用。<br><a href=\"https://lijing0906.github.io/post/promise\" target=\"_blank\" rel=\"noopener\">Promise</a>中讲过Promise.resolve(‘success’);等价于new Promise(resolve =&gt; { resolve(‘success’); });，因此先打印1，然后return 2，这个then被调用之后返回一个Promise，因此在第二个then时会打印2。</p>\n<h1 id=\"题目五\"><a href=\"#题目五\" class=\"headerlink\" title=\"题目五\"></a><strong>题目五</strong></h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'once'</span>)</span><br><span class=\"line\">    resolve(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> start = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res, <span class=\"built_in\">Date</span>.now() - start)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res, <span class=\"built_in\">Date</span>.now() - start)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 执行结果如下：</span></span><br><span class=\"line\"><span class=\"comment\">// once</span></span><br><span class=\"line\"><span class=\"comment\">// success 1002</span></span><br><span class=\"line\"><span class=\"comment\">// success 1003</span></span><br></pre></td></tr></table></figure>\n<p><strong>解读：</strong>  promise 的 .then 或者.catch可以被调用多次，但这里 Promise构造函数只执行一次。或者说 promise内部状态一经改变，并且有了一个值，那么后续每次调用 .then或者 .catch都会直接拿到该值。Date.now() - start的值看浏览器的执行效率，可能一样，可能相差一点点。</p>\n<h1 id=\"题目六\"><a href=\"#题目六\" class=\"headerlink\" title=\"题目六\"></a><strong>题目六</strong></h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error!!!'</span>)</span><br><span class=\"line\"> &#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'then: '</span>, res)</span><br><span class=\"line\"> &#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch: '</span>, err)</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"> <span class=\"comment\">// 执行结果如下：</span></span><br><span class=\"line\"> <span class=\"comment\">// then: Error: error!!!</span></span><br><span class=\"line\"> <span class=\"comment\">//   at Promise.resolve.then (...)</span></span><br><span class=\"line\"> <span class=\"comment\">//   at ...</span></span><br></pre></td></tr></table></figure>\n<p><strong>解读：</strong> .then或者 .catch中 return一个 error对象并不会抛出错误，所以不会被后续的 .catch捕获，需要改成其中一种：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error!!!'</span>))</span><br><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error!!!'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>因为返回任意一个非 promise的值都会被包裹成 promise对象，即 return new Error(‘error!!!’)等价于 return Promise.resolve(new Error(‘error!!!’))。</p>\n<h1 id=\"题目七\"><a href=\"#题目七\" class=\"headerlink\" title=\"题目七\"></a><strong>题目七</strong></h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> promise</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">promise.catch(<span class=\"built_in\">console</span>.error)</span><br><span class=\"line\"><span class=\"comment\">// 执行结果如下：</span></span><br><span class=\"line\"><span class=\"comment\">// TypeError: Chaining cycle detected for promise #&lt;Promise&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//    at &lt;anonymous&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//    at process._tickCallback (internal/process/next_tick.js:188:7)</span></span><br><span class=\"line\"><span class=\"comment\">//    at Function.Module.runMain (module.js:667:11)</span></span><br><span class=\"line\"><span class=\"comment\">//    at startup (bootstrap_node.js:187:16)</span></span><br><span class=\"line\"><span class=\"comment\">//    at bootstrap_node.js:607:3</span></span><br></pre></td></tr></table></figure>\n<p><strong>解读：</strong> .then或 .catch返回的值不能是 promise本身，否则会造成死循环。类似于：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tick</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'tick'</span>)</span><br><span class=\"line\">  process.nextTick(tick)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"题目八\"><a href=\"#题目八\" class=\"headerlink\" title=\"题目八\"></a><strong>题目八</strong></h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">1</span>)</span><br><span class=\"line\">  .then(<span class=\"number\">2</span>)</span><br><span class=\"line\">  .then(<span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">3</span>))</span><br><span class=\"line\">  .then(<span class=\"built_in\">console</span>.log)</span><br><span class=\"line\"><span class=\"comment\">// 执行结果如下：</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p><strong>解读：</strong> .then或者 .catch的参数期望是函数，传入非函数则会发生值穿透。</p>\n<h1 id=\"题目九\"><a href=\"#题目九\" class=\"headerlink\" title=\"题目九\"></a><strong>题目九</strong></h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">success</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>)</span><br><span class=\"line\"> &#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fail1</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.error(<span class=\"string\">'fail1: '</span>, e)</span><br><span class=\"line\"> &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fail2</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.error(<span class=\"string\">'fail2: '</span>, e)</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"> <span class=\"comment\">// 执行结果如下：</span></span><br><span class=\"line\"> <span class=\"comment\">// fail2: Error: error</span></span><br><span class=\"line\"> <span class=\"comment\">//   at success (...)</span></span><br><span class=\"line\"> <span class=\"comment\">//   at ...</span></span><br></pre></td></tr></table></figure>\n<p><strong>解读：</strong> .then可以接收两个参数，第一个是处理成功的函数，第二个是处理错误的函数。.catch是 .then第二个参数的简便写法，但是它们用法上有一点需要注意：.then的第二个处理错误的函数捕获不了第一个处理成功的函数抛出的错误，而后续的 .catch可以捕获之前的错误。当然以下代码也能达到同样的效果：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">success1</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>)</span><br><span class=\"line\"> &#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fail1</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.error(<span class=\"string\">'fail1: '</span>, e)</span><br><span class=\"line\"> &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">success2</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\"> &#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fail2</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.error(<span class=\"string\">'fail2: '</span>, e)</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"题目十\"><a href=\"#题目十\" class=\"headerlink\" title=\"题目十\"></a><strong>题目十</strong></h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'nextTick'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'then'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'setImmediate'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 执行结果如下：</span></span><br><span class=\"line\"><span class=\"comment\">// end</span></span><br><span class=\"line\"><span class=\"comment\">// nextTick</span></span><br><span class=\"line\"><span class=\"comment\">// then</span></span><br><span class=\"line\"><span class=\"comment\">// setImmediate</span></span><br></pre></td></tr></table></figure>\n<p><strong>解读：</strong> process.nextTick和 promise.then都属于 microtask，而 setImmediate属于 macrotask，在事件循环的 check阶段执行。事件循环的每个阶段（macrotask）之间都会执行 microtask，事件循环的开始会先执行一次 microtask。</p>\n","prev":{"title":"var、let和const的区别","slug":"varletconst"},"next":{"title":"Promise","slug":"promise"},"link":"/promiseTest","toc":[{"title":"<strong>题目一</strong>","id":"题目一","index":"1"},{"title":"<strong>题目二</strong>","id":"题目二","index":"2"},{"title":"<strong>题目三</strong>","id":"题目三","index":"3"},{"title":"<strong>题目四</strong>","id":"题目四","index":"4"},{"title":"<strong>题目五</strong>","id":"题目五","index":"5"},{"title":"<strong>题目六</strong>","id":"题目六","index":"6"},{"title":"<strong>题目七</strong>","id":"题目七","index":"7"},{"title":"<strong>题目八</strong>","id":"题目八","index":"8"},{"title":"<strong>题目九</strong>","id":"题目九","index":"9"},{"title":"<strong>题目十</strong>","id":"题目十","index":"10"}]}