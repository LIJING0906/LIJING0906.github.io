{"title":"call()、apply()、bind()的区别","date":"2019-08-03T03:49:24.000Z","excerpt":"","slug":"callapplybind","comments":true,"dropcap":true,"tags":["javaScript"],"categories":["javaScript"],"updated":"2019-12-01T13:34:23.000Z","content":"<p>这周讲讲<code>call()</code>、<code>apply()</code>和<code>bind()</code>的区别。<a href=\"https://www.cnblogs.com/moqiutao/p/7371988.html\" target=\"_blank\" rel=\"noopener\">参考链接</a><br>在javascript中，<code>call()</code>和<code>apply()</code>都是为了改变某个函数运行时的上下文（<code>context</code>）而存在的，换句话说，就是为了改变函数体内部<code>this</code>的指向。<br>JavaScript的一大特点是，函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念。</p>\n<h1 id=\"call-和apply-例子\"><a href=\"#call-和apply-例子\" class=\"headerlink\" title=\"call()和apply()例子\"></a><strong>call()和apply()例子</strong></h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fruits</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">Fruits.prototype = &#123;</span><br><span class=\"line\">    color: <span class=\"string\">'red'</span>,</span><br><span class=\"line\">    sayColor: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> Fruits();</span><br><span class=\"line\">apple.sayColor();    <span class=\"comment\">// red</span></span><br></pre></td></tr></table></figure>\n<p>如果有一个对象<code>banana = {color : &#39;yellow&#39;}</code>想调用<code>apple</code>的<code>sayColor()</code>方法，那么我们可以通过<code>call()</code>或<code>apply()</code>改变<code>sayColor()</code>方法里的<code>this</code>指向来实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">banana = &#123;</span><br><span class=\"line\">    color: <span class=\"string\">'yellow'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">apple.sayColor.call(banana); <span class=\"comment\">// yellow</span></span><br><span class=\"line\">apple.sayColor.apply(banana); <span class=\"comment\">// yellow</span></span><br></pre></td></tr></table></figure></p>\n<p>所以，当一个<code>object</code>没有某个方法（本栗子中<code>banana</code>没有<code>sayColor()</code>方法），但是其他对象有（本栗子中<code>apple</code>有<code>sayColor()</code>方法），我们可以借助<code>call()</code>或<code>apply()</code>用其它对象的方法来操作。让我想到了JS的借用构造函数继承。</p>\n<h1 id=\"call-和apply-区别\"><a href=\"#call-和apply-区别\" class=\"headerlink\" title=\"call()和apply()区别\"></a><strong>call()和apply()区别</strong></h1><p>其实<code>apply()</code>和<code>call()</code>作用完全一样，只是接受参数的方式不太一样。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123;&#125;;</span><br><span class=\"line\">func.call(<span class=\"keyword\">this</span>, arg1, arg2);</span><br><span class=\"line\">func.apply(<span class=\"keyword\">this</span>, [arg1, arg2]);</span><br></pre></td></tr></table></figure></p>\n<p>第一个参数——<code>this</code>是你想指定的上下文，它可以是任何一个JS对象(JS中一切皆对象)，当第一个参数为<code>null</code>、<code>undefined</code>的时候，默认指向<code>window</code>。<code>call()</code>需要把参数按顺序传递进去，而<code>apply()</code>则是把参数放在数组里。<br>因此，在确定参数个数的情况下用<code>call()</code>更好，参数一目了然；参数个数不确定时用<code>apply()</code>更好。</p>\n<h1 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind()\"></a><strong>bind()</strong></h1><p>和<code>call()</code>很相似，第一个参数是<code>this</code>的指向，从第二个参数开始是接收的参数列表。区别在于<code>bind()</code>方法返回值是函数以及<code>bind()`</code>接收的参数列表的使用。</p>\n<ol>\n<li>bind返回值是函数<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Dot'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dot = printName.bind(obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dot); <span class=\"comment\">// function () &#123; … &#125;</span></span><br><span class=\"line\">dot();  <span class=\"comment\">// Dot</span></span><br><span class=\"line\">printName(); <span class=\"comment\">// 这里打印为空，因为window对象里name属性的值默认为空，可以自行打印一下便知</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><code>bind()</code>方法不会立即执行，而是返回一个改变了上下文<code>this</code>后的函数。而原函数<code>printName()</code>中的<code>this</code>并没有被改变，依旧指向全局对象<code>window</code>。</p>\n<ol start=\"2\">\n<li>参数的使用<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a, b, c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn1 = fn.bind(<span class=\"literal\">null</span>, <span class=\"string\">'Dot'</span>);</span><br><span class=\"line\">fn(<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>); <span class=\"comment\">// A B C</span></span><br><span class=\"line\">fn1(<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>); <span class=\"comment\">// Dot A B</span></span><br><span class=\"line\">fn1(<span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>); <span class=\"comment\">// Dot B C</span></span><br><span class=\"line\">fn.call(<span class=\"literal\">null</span>, <span class=\"string\">'Dot'</span>); <span class=\"comment\">// Dot undefined undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><code>call()</code>是把第二个及以后的参数作为<code>fn()</code>方法的实参传进去，而<code>fn1()</code>方法的实参实则是在<code>bind()</code>中参数的基础上再往后排。<br><strong><em>有时候我们也用bind方法实现函数柯里化（是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术）</em></strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> increment = add(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> addTen = add(<span class=\"number\">10</span>);</span><br><span class=\"line\">increment(<span class=\"number\">2</span>); <span class=\"comment\">// 3</span></span><br><span class=\"line\">addTen(<span class=\"number\">2</span>); <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure></p>\n<p><strong><em>在低版本浏览器没有bind()方法，我们也可以自己实现一个</em></strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Function</span>.prototype.bind) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>,                        <span class=\"comment\">// 保存原函数</span></span><br><span class=\"line\">            context = [].shift.call(<span class=\"built_in\">arguments</span>), <span class=\"comment\">// 保存需要绑定的this上下文</span></span><br><span class=\"line\">            args = [].slice.call(<span class=\"built_in\">arguments</span>);    <span class=\"comment\">// 剩余的参数转为数组</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;                    <span class=\"comment\">// 返回一个新函数</span></span><br><span class=\"line\">            self.apply(context, [].concat.call(args, [].slice.call(<span class=\"built_in\">arguments</span>)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a><strong>应用场景</strong></h1><ol>\n<li><p>求数组中的最大和最小值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">89</span>, <span class=\"number\">3</span>, <span class=\"number\">46</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, arr); <span class=\"comment\">// 89</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> min = <span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>, arr); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将类数组转化为数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var trueArr = Array.prototype.slice.call(arrayLike);</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">list</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> list1 = list(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(list1);  <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组追加</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> total = [].push.apply(arr1, arr2);</span><br><span class=\"line\"><span class=\"comment\">// var total = Array.prototype.push.apply(arr1, arr2);</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total); <span class=\"comment\">// 6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1); <span class=\"comment\">// [1, 2, 3, 4, 5, 6]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2); <span class=\"comment\">// [4,5,6]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>判断变量类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj) == <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">isArray([]) <span class=\"comment\">// true</span></span><br><span class=\"line\">isArray(<span class=\"string\">'dot'</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用call和apply做继承(借用构造函数)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里的this都指向实例</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Female</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    Person.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); <span class=\"comment\">// 将父元素所有方法在这里执行一遍就继承了</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dot = <span class=\"keyword\">new</span> Female(<span class=\"string\">'Dot'</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用log代理console.log</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log.apply(<span class=\"built_in\">console</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>绑定函数<br>MDN对<code>bind()</code>的解释是：<code>bind()</code>方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入<code>bind()</code>方法的第一个参数作为<code>this</code>，传入<code>bind()</code>方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.num = <span class=\"number\">9</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> mymodule = &#123;</span><br><span class=\"line\">  num: <span class=\"number\">81</span>,</span><br><span class=\"line\">  getNum: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">mymodule.getNum(); <span class=\"comment\">// 81</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getNum = mymodule.getNum;</span><br><span class=\"line\">getNum(); <span class=\"comment\">// 9, 因为在这个例子中，\"this\"指向全局对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> boundGetNum = getNum.bind(mymodule);</span><br><span class=\"line\">boundGetNum(); <span class=\"comment\">// 81</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h1><p><code>call()</code>、<code>apply()</code>和<code>bind()</code>函数存在的区别:<br><code>bind()</code>返回对应函数，便于稍后调用；<code>apply()</code>和<code>call()</code>则是立即调用。<br>除此外，在ES6的箭头函数下，<code>call()</code>和<code>apply()</code>将失效，对于箭头函数来说：</p>\n<ul>\n<li>箭头函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象，所以不需要类似于<code>var _this = this</code>这种丑陋的写法</li>\n<li>箭头函数不可以当作构造函数，也就是说不可以使用<code>new</code>命令， 否则会抛出一个错误</li>\n<li>箭头函数不可以使用<code>arguments</code>对象，该对象在函数体内不存在，如果要用， 可以用<code>Rest</code>参数代替</li>\n<li>不可以使用<code>yield</code>命令，因此箭头函数不能用作<code>Generator</code>函数，什么是<code>Generator</code>函数可自行查阅资料，推荐阅读阮一峰<a href=\"http://www.ruanyifeng.com/blog/2015/04/generator.html\" target=\"_blank\" rel=\"noopener\">Generator函数的含义与用法</a>、<a href=\"http://es6.ruanyifeng.com/#docs/generator-async\" target=\"_blank\" rel=\"noopener\">Generator函数的异步应用</a></li>\n</ul>\n","prev":{"title":"原型和原型链","slug":"prototypeChain"},"next":{"title":"JS中的this指向问题","slug":"JSthis"},"link":"/callapplybind","toc":[{"title":"<strong>call()和apply()例子</strong>","id":"call-和apply-例子","index":"1"},{"title":"<strong>call()和apply()区别</strong>","id":"call-和apply-区别","index":"2"},{"title":"<strong>bind()</strong>","id":"bind","index":"3"},{"title":"<strong>应用场景</strong>","id":"应用场景","index":"4"},{"title":"<strong>总结</strong>","id":"总结","index":"5"}]}