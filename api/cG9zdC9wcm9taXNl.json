{"title":"Promise","date":"2019-11-17T04:39:49.000Z","excerpt":"","slug":"promise","comments":true,"dropcap":true,"tags":["ES6"],"categories":["javaScript"],"updated":"2019-12-01T13:34:23.000Z","content":"<p>上一篇博客讲到浏览器的进程和线程、循环机制、微任务和宏任务，Promise在JS的循环机制中属于微任务,同时也是异步编程的一种解决方案。</p>\n<h1 id=\"Promise简介\"><a href=\"#Promise简介\" class=\"headerlink\" title=\"Promise简介\"></a><strong>Promise简介</strong></h1><p>Promise可以看成是一个容器，装着一个异步操作（某个未来才会结束的事件）的结果。Promise操作后返回的对象是一个新的Promise对象，所以支持链式调用，可以把异步操作的流程以同步操作的流程表达出来，避免回调地狱，便于理解和阅读。</p>\n<h2 id=\"Promise状态\"><a href=\"#Promise状态\" class=\"headerlink\" title=\"Promise状态\"></a>Promise状态</h2><ol>\n<li>Promise对象的状态不受外界的影响，它有三种状态：<br> <strong>pending：进行中</strong><br> <strong>fulfilled：已成功</strong><br> <strong>rejected：已失败</strong><br> 只有异步操作的结果才能确定Promise处于哪种状态，而且任何外界的操作都不能改变这个状态。这也是Promise（承诺）的由来。</li>\n<li>Promise的状态一旦确定就不会再变，任何时候都可以得到这个结果，它的状态改变只有两种结果：<br> <strong>从pending状态变为fulfilled状态</strong><br> <strong>从pending状态变为rejected状态</strong><br> 只要有其中一种情况发生，状态就凝固了，不会再变，会一直得到这个结果，后续再添加Promise的回到函数也只能拿到前面凝固的状态。<h2 id=\"Promise的缺点\"><a href=\"#Promise的缺点\" class=\"headerlink\" title=\"Promise的缺点\"></a>Promise的缺点</h2></li>\n<li>无法取消。一旦新建，它就会立即执行，无法中途取消</li>\n<li>如果没有设置回调函数（没有捕获错误），Promise内部抛出的错误不会反应到外部</li>\n<li>当处于pending状态时，无法得知当前进展到哪个阶段（刚刚开始还是即将结束）<h2 id=\"几个概念\"><a href=\"#几个概念\" class=\"headerlink\" title=\"几个概念\"></a>几个概念</h2>异步：多个任务可以同时执行，互不影响<br>同步：多个任务必须排队，等待一个一个执行<br>串行：任务按顺序执行，前一个任务的结果可以是下一个任务的参数，所以必须等待前一个任务执行完毕才能往下继续<br>并行：多个任务可以同步执行，各不相干，实际是一个异步操作的过程</li>\n</ol>\n<h1 id=\"Promise-API\"><a href=\"#Promise-API\" class=\"headerlink\" title=\"Promise API\"></a><strong>Promise API</strong></h1><p>先来看看Promise都有哪些API：<br><img src=\"https://img-blog.csdnimg.cn/20191117145308889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI3NTE0NTg3,size_16,color_FFFFFF,t_70\" alt=\"promiseApis\"><br>从上图可以看出，Promise既是一个对象也是一个函数，下面就具体分析它的每个api:</p>\n<h2 id=\"Promise-prototype-constructor\"><a href=\"#Promise-prototype-constructor\" class=\"headerlink\" title=\"Promise.prototype.constructor()\"></a>Promise.prototype.constructor()</h2><p>基本用法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"comment\">/*异步操作成功*/</span>) &#123;</span><br><span class=\"line\">\t\tresolve(success);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\treject(error);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Promise接收一个函数作为参数，函数有两个参数：resolve和reject，这两个参数也都是函数，是Promise内置的两个方法，会在异步操作执行结束后调用，可以将异步操作的结果回传至回调函数，以确定Promise最终的一个状态（是fulfilled还是rejected）。<br>resolve（reject）方法的作用是将Promise的pending状态变为fulfilled（rejected），在异步操作成功（失败）之后调用，可以将异步操作的结果作为参数传递出去。<br>resolve和reject只有一个会执行，不会同时被执行，因为Promise只能保持一种状态。</p>\n<h2 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h2><p>Promise实例确认后，可以用then方法分别指定fulfilled状态和rejected状态的回调函数，基本用法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.then(<span class=\"function\"><span class=\"params\">success</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(success);</span><br><span class=\"line\">&#125;, error =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 或者写成下面这种写法</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.then(<span class=\"function\"><span class=\"params\">success</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(success);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>一般推荐第二种写法，因为第一种写法无法捕获resolve执行过程中抛出的错，具体代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPromise</span>(<span class=\"params\">p, arg</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arg === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\treject(<span class=\"string\">`<span class=\"subst\">$&#123;p&#125;</span> fail`</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tresolve(<span class=\"string\">`<span class=\"subst\">$&#123;p&#125;</span> ok`</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createPromise(<span class=\"string\">'p1'</span>, <span class=\"number\">1</span>).then(<span class=\"function\"><span class=\"params\">success</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`第一个异步成功回调： <span class=\"subst\">$&#123;success&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> createPromise(<span class=\"string\">'p2'</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;, error =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>执行结果如下：<br><img src=\"/2019/11/17/promise/uncatch.png\" alt=\"uncatch\"><br>如果换成第二种写法得到的执行结果：<br><img src=\"/2019/11/17/promise/catch.png\" alt=\"catch\"><br>如果Promise内部抛出的错不被捕获，是不会反应到外部的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPromise</span>(<span class=\"params\">p, arg</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arg === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\treject(<span class=\"string\">`<span class=\"subst\">$&#123;p&#125;</span> fail`</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tresolve(<span class=\"string\">`<span class=\"subst\">$&#123;p&#125;</span> ok`</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createPromise(<span class=\"string\">'p1'</span>, <span class=\"number\">0</span>).then(<span class=\"function\"><span class=\"params\">success</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`第一个异步成功回调： <span class=\"subst\">$&#123;success&#125;</span>`</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/11/17/promise/uncatch.png\" alt=\"uncatch\"><br>then还可以很好的解决异步串行操作的层层嵌套问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">\turl: <span class=\"string\">'....'</span>,</span><br><span class=\"line\">\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t$.ajax(&#123;</span><br><span class=\"line\">\t\t\turl: <span class=\"string\">'....'</span>,</span><br><span class=\"line\">\t\t\tdata: data,</span><br><span class=\"line\">\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t$.ajax(&#123;</span><br><span class=\"line\">\t\t\t\t\turl: <span class=\"string\">'....'</span>,</span><br><span class=\"line\">\t\t\t\t\tdata: data,</span><br><span class=\"line\">\t\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t.....</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>改造成Promise：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createPromise(<span class=\"string\">'p1'</span>, <span class=\"number\">1</span>).then(<span class=\"function\"><span class=\"params\">success</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`正在执行 <span class=\"subst\">$&#123;success&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> createPromise(<span class=\"string\">'p2'</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">success</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`正在执行 <span class=\"subst\">$&#123;success&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> createPromise(<span class=\"string\">'p3'</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">success</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`正在执行 <span class=\"subst\">$&#123;success&#125;</span>`</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 正在执行 p1 ok</span></span><br><span class=\"line\"><span class=\"comment\">// 正在执行 p2 ok</span></span><br><span class=\"line\"><span class=\"comment\">// 正在执行 p3 ok</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch()\"></a>Promise.prototype.catch()</h2><p>这个在前面的then方法里有讲到，能捕获resolve执行过程中抛出的错。这里不再赘述。<br>catch的多种写法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法一</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'fail'</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">\t\treject(e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(error); <span class=\"comment\">// Error: fail</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 写法二</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\treject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'fail'</span>);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(error); <span class=\"comment\">// Error: fail</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Promise错误具有‘冒泡’的性质，如果不被捕获会一直往外抛，直到被捕获为止：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createPromise(<span class=\"string\">'p1'</span>, <span class=\"number\">0</span>).then(<span class=\"function\"><span class=\"params\">success</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(success);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> createPromise(<span class=\"string\">'p2'</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">success</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(success);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> createPromise(<span class=\"string\">'p3'</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(error); <span class=\"comment\">// p1 fail</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-prototype-finally\"><a href=\"#Promise-prototype-finally\" class=\"headerlink\" title=\"Promise.prototype.finally()\"></a>Promise.prototype.finally()</h2><p>finally方法用于指定不管Promise对象最后状态如何，都会执行的操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createPromise(<span class=\"string\">'p1'</span>, <span class=\"number\">0</span>).then(<span class=\"function\"><span class=\"params\">success</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(success);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(error); <span class=\"comment\">// p1 fail</span></span><br><span class=\"line\">&#125;).finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'finally'</span>); <span class=\"comment\">// finally</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">createPromise(<span class=\"string\">'p1'</span>, <span class=\"number\">1</span>).then(<span class=\"function\"><span class=\"params\">success</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(success);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(error); <span class=\"comment\">// p1 ok</span></span><br><span class=\"line\">&#125;).finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'finally'</span>); <span class=\"comment\">// finally</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>finally方法不接受任何参数，故可知它跟Promise的状态无关，不依赖于Promise的执行结果。</p>\n<h2 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h2><p>Promise.all方法接受一个数组作为参数，但每个参数必须是一个Promise实例。Promise.all提供了并行执行异步操作的能力，并且在所有异步操作都执行完毕后才执行回调，只要其中一个异步操作返回的状态为rejected，那么Promise.all返回的状态就是rejected，此时第一个被reject的实例的返回值会传递给Promise.all的回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 两个Promise都成功，返回异步操作结果的数组</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">\t.all([createPromise(<span class=\"string\">'p1'</span>, <span class=\"number\">1</span>), createPromise(<span class=\"string\">'p2'</span>, <span class=\"number\">1</span>)])</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(res); <span class=\"comment\">// (2) [\"p1 ok\", \"p2 ok\"]</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 其中一个Promise失败，返回失败的异步操作的信息</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">\t.all([createPromise(<span class=\"string\">'p1'</span>, <span class=\"number\">0</span>), createPromise(<span class=\"string\">'p2'</span>, <span class=\"number\">1</span>)])</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">\t&#125;).catch(<span class=\"function\"><span class=\"params\">er</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(er); <span class=\"comment\">// p1 fail</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 两个Promise都失败，返回第一个失败的异步操作的信息</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">\t.all([createPromise(<span class=\"string\">'p1'</span>, <span class=\"number\">0</span>), createPromise(<span class=\"string\">'p2'</span>, <span class=\"number\">0</span>)])</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">\t&#125;).catch(<span class=\"function\"><span class=\"params\">er</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(er); <span class=\"comment\">// p1 fail</span></span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果Promise.all的Promise实例参数自己定义了catch方法，那么它一旦被rejected，就不会触发Promise.all的catch方法，而是执行then中的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\tresolve(<span class=\"string\">'ok'</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e);</span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'报错了'</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2])</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br><span class=\"line\">\t.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(e));</span><br><span class=\"line\"><span class=\"comment\">// (2) [\"ok\", Error: 报错了]</span></span><br></pre></td></tr></table></figure>\n<p>反之，如果Promise的实例参数自己没有定义catch方法，那就会触发Promise.all的catch方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\tresolve(<span class=\"string\">'ok'</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e);</span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'报错了'</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2])</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res))</span><br><span class=\"line\">\t.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(e));</span><br><span class=\"line\"><span class=\"comment\">// Error: 报错了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h2><p>Promise的race方法和all方法类似，都提供了并行执行异步操作的能力，但是all方法的效果实际上是「谁跑的慢，以谁为准执行回调」，而race方法则是「谁跑的快，以谁为准执行回调」，以下就是race的执行过程：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">\t.race([createPromise(<span class=\"string\">'p1'</span>, <span class=\"number\">1</span>), createPromise(<span class=\"string\">'p2'</span>, <span class=\"number\">1</span>)])</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(res); <span class=\"comment\">// p1 ok</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">\t.race([createPromise(<span class=\"string\">'p1'</span>, <span class=\"number\">0</span>), createPromise(<span class=\"string\">'p2'</span>, <span class=\"number\">1</span>)])</span><br><span class=\"line\">\t.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">\t&#125;).catch(<span class=\"function\"><span class=\"params\">er</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(er); <span class=\"comment\">// p1 fail</span></span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve()\"></a>Promise.resolve()</h2><blockquote>\n<p>语法：</p>\n<ol>\n<li>Promise.resolve(value);</li>\n<li>Promise.resolve(promise);</li>\n<li>Promise.resolve(thenable);</li>\n</ol>\n</blockquote>\n<p>它可以看作是new Promise()的快捷方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'success'</span>);</span><br><span class=\"line\"><span class=\"comment\">// ====等价于====</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">\tresolve(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>Promise.resolve()让Promise对象立即进入fulfilled状态，并将结果传递给回调函数，由于Promise.resolve()返回的一个Promise对象，因此可以用.then()方法处理其放回值。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理value</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'success'</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(res); <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 处理数组</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(res[<span class=\"number\">0</span>]); <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 处理Promise</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'this is p1'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"built_in\">Promise</span>.resolve(p1);</span><br><span class=\"line\">p2.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(res); <span class=\"comment\">// this is p1</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>Promise.resolve()的另外一个作用就是讲thenable对象（即带有then方法的对象）转换为Promise对象。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"built_in\">Promise</span>.resolve(&#123;</span><br><span class=\"line\">\tthen: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\t\tresolve(<span class=\"string\">'this is an thenable object'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">p1.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(val); <span class=\"comment\">// this is an thenable object</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(error));</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject()\"></a>Promise.reject()</h2><blockquote>\n<p>语法<br>Promise.reject(reson);</p>\n</blockquote>\n<p>和上面的Promise.resolve()类似，它也是new Promise()的快捷方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\treject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ====等价于====</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>));</span><br></pre></td></tr></table></figure></p>\n<p>这段代码会让Promise对象立即进入rejected状态，并将错误对象传递给回调函数。</p>\n<h1 id=\"Promise的相关应用\"><a href=\"#Promise的相关应用\" class=\"headerlink\" title=\"Promise的相关应用\"></a><strong>Promise的相关应用</strong></h1><ol>\n<li>Promise一旦创建就会立即执行，中途无法取消。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 宏任务</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'new Promise'</span>);</span><br><span class=\"line\">\tresolve(<span class=\"string\">'resolve'</span>); <span class=\"comment\">// 微任务</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">success</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(success);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 宏任务</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'setTimeout'</span>), <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 宏任务</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'console.log'</span>);</span><br><span class=\"line\"><span class=\"comment\">// new Promise</span></span><br><span class=\"line\"><span class=\"comment\">// console.log</span></span><br><span class=\"line\"><span class=\"comment\">// resolve</span></span><br><span class=\"line\"><span class=\"comment\">// setTimeout</span></span><br></pre></td></tr></table></figure>\n<p>new Promise()和console.log()属于script（全局宏任务），JS代码是从上至下执行的，所以先执行全局宏任务，当遇到Promise.resolve()这个微任务，待全局宏任务执行完就会立即执行微任务，当执行完微任务就会进行一次UI更新，然后再到任务队列中取出下个宏任务（setTimeout()），依次执行。</p>\n<ol start=\"2\">\n<li>如果不设置回调函数，Promise内部抛出的错误，不会反应到外部：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createPromise(<span class=\"string\">'p1'</span>, <span class=\"number\">0</span>).then(<span class=\"function\">(<span class=\"params\">success</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(success);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'console.log'</span>);</span><br><span class=\"line\">createPromise(<span class=\"string\">'p2'</span>, <span class=\"number\">1</span>).then(<span class=\"function\">(<span class=\"params\">success</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(success);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// console.log</span></span><br><span class=\"line\"><span class=\"comment\">// p2 ok</span></span><br><span class=\"line\"><span class=\"comment\">// uncaught (in promise) p1 fail</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Promise状态一旦确定，就不会再变，任何时候都可以得到这个结果：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\tresolve(<span class=\"string\">'resolve'</span>);</span><br><span class=\"line\">\treject(<span class=\"string\">'reject'</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">success</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(success); <span class=\"comment\">// resolve</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在resolve后面抛出错误，不会被捕获，等于没有抛出。</p>\n<ol start=\"4\">\n<li><p>调用resolve或reject方法并不会终结其后面函数的执行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tresolve(<span class=\"string\">'resolve'</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">success</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(success);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// resolve</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一般来说，调用resolve或reject以后，Promise的使命就完成了</span></span><br><span class=\"line\"><span class=\"comment\">// 后续操作应该放在then方法里，而不应该写在resolve或reject的后面</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> resolve(<span class=\"string\">'ok'</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">success</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(success);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// ok</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Promise.all与Promise.race的应用对比：</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加载图片</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadImg</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</span><br><span class=\"line\">\t\timg.src = url;</span><br><span class=\"line\">\t\timg.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\tresolve(img);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\timg.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">\t\t\treject(<span class=\"string\">'img load is error'</span>);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 显示多张图片</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showImgs</span>(<span class=\"params\">imgs</span>) </span>&#123;</span><br><span class=\"line\">\timgs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">document</span>.body.appendChild(item);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 显示一张图片</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showImg</span>(<span class=\"params\">img</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.body.appdendChild(img);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Promise.all()</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">\tloadImg(url1), loadImg(url2)</span><br><span class=\"line\">]).then(<span class=\"function\">(<span class=\"params\">success</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(success); <span class=\"comment\">// 只有所有的图片都加载出来了才会执行这里</span></span><br><span class=\"line\">\tshowImgs(success);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// Promise.race()</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([</span><br><span class=\"line\">\tloadImg(url1), loadImg(url2), loadImg(url3)</span><br><span class=\"line\">]).then(<span class=\"function\">(<span class=\"params\">success</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(success); <span class=\"comment\">// 谁先加载成功就打印谁，后面如果加载出错也不会被捕获</span></span><br><span class=\"line\">\tshowImg(success);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(error); <span class=\"comment\">// 如果先加载图片出错，则这里会打印</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","prev":{"title":"Promise面试题","slug":"promiseTest"},"next":{"title":"浏览器进程、JS事件循环机制、宏任务和微任务","slug":"beforePromise"},"link":"/promise","toc":[{"title":"<strong>Promise简介</strong>","id":"Promise简介","index":"1","children":[{"title":"Promise状态","id":"Promise状态","index":"1.1"},{"title":"Promise的缺点","id":"Promise的缺点","index":"1.2"},{"title":"几个概念","id":"几个概念","index":"1.3"}]},{"title":"<strong>Promise API</strong>","id":"Promise-API","index":"2","children":[{"title":"Promise.prototype.constructor()","id":"Promise-prototype-constructor","index":"2.1"},{"title":"Promise.prototype.then()","id":"Promise-prototype-then","index":"2.2"},{"title":"Promise.prototype.catch()","id":"Promise-prototype-catch","index":"2.3"},{"title":"Promise.prototype.finally()","id":"Promise-prototype-finally","index":"2.4"},{"title":"Promise.all()","id":"Promise-all","index":"2.5"},{"title":"Promise.race()","id":"Promise-race","index":"2.6"},{"title":"Promise.resolve()","id":"Promise-resolve","index":"2.7"},{"title":"Promise.reject()","id":"Promise-reject","index":"2.8"}]},{"title":"<strong>Promise的相关应用</strong>","id":"Promise的相关应用","index":"3"}]}