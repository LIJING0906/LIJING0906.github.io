{"title":"一些数组的操作技巧","date":"2020-08-09T03:52:06.000Z","excerpt":"","slug":"arrayfn","comments":true,"dropcap":true,"tags":["javaScript"],"categories":["javaScript"],"updated":"2020-08-09T08:02:34.768Z","content":"<p>工作中大多数情况下都是对数组的操作，熟练掌握数组操作的奇淫技巧，对数组运用自如也能提高工作效率。</p>\n<h1 id=\"数组去重（改变原数组）\"><a href=\"#数组去重（改变原数组）\" class=\"headerlink\" title=\"数组去重（改变原数组）\"></a><strong>数组去重（改变原数组）</strong></h1><p>先讲两个<code>ES6</code>时代简单的去重方法，都是用<code>Set</code>结构完成：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> letters = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> uniqueLetter = <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(letters));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(uniqueLetter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> uniqueLetter1 = [...new <span class=\"built_in\">Set</span>(letters)];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(uniqueLetter1);</span><br></pre></td></tr></table></figure></p>\n<p>你说了这两个方法，有的面试官可能不会轻易就放你过，可能还会问你原始的方法如何去重，篇幅有限，下次再总结。</p>\n<h1 id=\"对数组增删改（改变原数组）\"><a href=\"#对数组增删改（改变原数组）\" class=\"headerlink\" title=\"对数组增删改（改变原数组）\"></a><strong>对数组增删改（改变原数组）</strong></h1><p><code>splice()</code>可以对数组进行<code>增删改（替换）</code>。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> letters = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];</span><br><span class=\"line\"><span class=\"comment\">// 增</span></span><br><span class=\"line\">letters.splice(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>); <span class=\"comment\">// 在下标为1的位置删除0个元素，同时增加e和f两个元素</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(letters); // ['a', 'e', 'f', 'b', 'c', 'd']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删</span></span><br><span class=\"line\">letters.splice(<span class=\"number\">3</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 在下标为3的位置删除1个元素</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(letters); // ['a', 'b', 'c']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 改（替换）</span></span><br><span class=\"line\">letters.splice(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>); <span class=\"comment\">// 在下标为2的位置删除2个元素，同时增加e和f两个元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(letters); <span class=\"comment\">// ['a', 'b', 'e', 'f']</span></span><br></pre></td></tr></table></figure></p>\n<p><code>splice()</code>的返回值是被删除的元素的数组。从上面的代码可以看出，增删改的差别就在于，从第二个参数开始的不同。</p>\n<h1 id=\"遍历数组\"><a href=\"#遍历数组\" class=\"headerlink\" title=\"遍历数组\"></a><strong>遍历数组</strong></h1><p>遍历数组的方法有很多种，传统的有：<code>for、forEach、for-in、 for-of(ES6)</code>，其他的还有：<code>map、reduce、reduceRight、filter、every、some、find（ES6）、findIndex（ES6）</code>，另外还有三个遍历器对象<code>keys，values，entries</code>，其实还有一个冷门的方法：<code>Array.from</code>也能达到跟<code>map</code>相同的效果，这里只讨论<code>Array.from</code>，其他方法另外再总结并比较区别。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> letterNums = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">letter</span>: <span class=\"string\">'A'</span>, <span class=\"attr\">num</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">letter</span>: <span class=\"string\">'B'</span>, <span class=\"attr\">num</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">letter</span>: <span class=\"string\">'C'</span>, <span class=\"attr\">num</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">letter</span>: <span class=\"string\">'D'</span>, <span class=\"attr\">num</span>: <span class=\"number\">4</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">let</span> letters = Arrary.from(letterNums, (&#123;letter&#125;) =&gt; letter);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(letters); <span class=\"comment\">// [\"A\", \"B\", \"C\", \"D\"]</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"清空数组（改变原数组）\"><a href=\"#清空数组（改变原数组）\" class=\"headerlink\" title=\"清空数组（改变原数组）\"></a><strong>清空数组（改变原数组）</strong></h1><h3 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h3><p><code>arr.splice(0,arr.length); console.log(arr);</code></p>\n<h3 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h3><p><code>arr.length=0; console.log(arr);</code></p>\n<h3 id=\"方式三\"><a href=\"#方式三\" class=\"headerlink\" title=\"方式三\"></a>方式三</h3><p><code>arr=[]; console.log(arr);</code>直接把原来的数组赋值为空数组</p>\n<h1 id=\"数组转换成对象\"><a href=\"#数组转换成对象\" class=\"headerlink\" title=\"数组转换成对象\"></a><strong>数组转换成对象</strong></h1><p>有时候需要将数组转换成对象的形式，使用<code>.map()</code>一类的迭代方法能达到目的，这里还有个更快的方法，前提是你正好希望对象的<code>key</code>就是数组的索引:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> letters = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> letterObj = &#123;...letters&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(letterObj); <span class=\"comment\">// &#123;0: \"a\", 1: \"b\", 2: \"c\", 3: \"d\"&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"合并数组\"><a href=\"#合并数组\" class=\"headerlink\" title=\"合并数组\"></a><strong>合并数组</strong></h1><p>提到合并数组，应该第一个想到的就是<code>concat</code>方法，但是有一个更高级的用法是<code>ES6</code>的扩展运算符<code>...</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> letters = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> nums = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> letterNum = [...letters, ...nums];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(letterNum); <span class=\"comment\">// [\"a\", \"b\", \"c\", \"d\", 1, 2, 3]</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"两个数组的交集\"><a href=\"#两个数组的交集\" class=\"headerlink\" title=\"两个数组的交集\"></a><strong>两个数组的交集</strong></h1><p>经典面试题之一，<code>ES6</code>简单的处理方法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> letterOne = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'a'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> letterTwo = [ <span class=\"string\">'b'</span>,<span class=\"string\">'f'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'g'</span>,<span class=\"string\">'h'</span>,];</span><br><span class=\"line\"><span class=\"keyword\">let</span> duplicatedValues = [...new <span class=\"built_in\">Set</span>(letterOne)].filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> letterTwo.includes(item));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(duplicatedValues); <span class=\"comment\">// [\"b\", \"d\"]</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"去除假值\"><a href=\"#去除假值\" class=\"headerlink\" title=\"去除假值\"></a><strong>去除假值</strong></h1><p>首先得知道假值(falsy values)是什么？在<code>JS</code>中，假值有：<code>false、0、&#39;&#39;、null、NaN、undefined</code>。<br>可以使用的是<code>filter</code>方法找到数组中的假值并去除：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> mixedArr = [<span class=\"number\">0</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">''</span>, <span class=\"literal\">NaN</span>, <span class=\"number\">9</span>, <span class=\"literal\">true</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">'white'</span>, <span class=\"literal\">false</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> trueArr = mixedArr.filter(<span class=\"built_in\">Boolean</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(trueArr); <span class=\"comment\">// returns ['blue', 9, true, 'white']</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"随机取数组的一个元素\"><a href=\"#随机取数组的一个元素\" class=\"headerlink\" title=\"随机取数组的一个元素\"></a><strong>随机取数组的一个元素</strong></h1><p>从数组中获取随机的一个值，也是一道经典的面试题。其实考察的核心知识是随机生成一个值取值区间为<code>[0, arr.length)</code>的<code>x</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">'blue'</span>, <span class=\"string\">'white'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'navy'</span>, <span class=\"string\">'pink'</span>, <span class=\"string\">'purple'</span>, <span class=\"string\">'orange'</span>, <span class=\"string\">'yellow'</span>, <span class=\"string\">'black'</span>, <span class=\"string\">'brown'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> randomColor = colors[(<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (colors.length)))]; <span class=\"comment\">// Math.random()得到的值为[0, 1)</span></span><br></pre></td></tr></table></figure></p>\n<p>关于数组的操作，除了前文提到的数组去重、数组遍历要总结，另外数组也有很多自身的方法，后续也会一一总结，毕竟掌握数组的操作技巧和方法真的太重要了。</p>\n","next":{"title":"什么是BFC？BFC有什么用？BFC怎么用？","slug":"BFC"},"link":"/arrayfn","toc":[{"title":"<strong>数组去重（改变原数组）</strong>","id":"数组去重（改变原数组）","index":"1"},{"title":"<strong>对数组增删改（改变原数组）</strong>","id":"对数组增删改（改变原数组）","index":"2"},{"title":"<strong>遍历数组</strong>","id":"遍历数组","index":"3"},{"title":"<strong>清空数组（改变原数组）</strong>","id":"清空数组（改变原数组）","index":"4"},{"title":"<strong>数组转换成对象</strong>","id":"数组转换成对象","index":"5"},{"title":"<strong>合并数组</strong>","id":"合并数组","index":"6"},{"title":"<strong>两个数组的交集</strong>","id":"两个数组的交集","index":"7"},{"title":"<strong>去除假值</strong>","id":"去除假值","index":"8"},{"title":"<strong>随机取数组的一个元素</strong>","id":"随机取数组的一个元素","index":"9"}]}